<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[thinkphp实践]]></title>
      <url>https://feahter.github.io/2016/11/30/thinkphp%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<!-- ![thinkphp](http://oe3di974t.bkt.clouddn.com/thinkphp.png) -->
<p><img src="http://oe3di974t.bkt.clouddn.com/thinkphp.png" alt="" class="myimg"></p>
<p>ThinkPHP是一个快速、兼容而且简单的轻量级国产PHP开发框架。鉴于5.0之后为迎合php7.0而重新构建的框架的不稳定性，我们使用截至目前较新较稳定的3.2.3版。（实践基础默认web环境已搭建好）</p>
<p><a href="http://www.thinkphp.cn/" target="_blank" rel="external">thinkphp官网</a></p>
<p><a href="http://document.thinkphp.cn/manual_3_2.html" target="_blank" rel="external">thinkphp完全开发手册</a></p>
<p><a href="http://www.thinkphp.cn/down/610.html" target="_blank" rel="external">下载</a></p>
<h3 id="step-1-解压提取访问"><a href="#step-1-解压提取访问" class="headerlink" title="step-1 解压提取访问"></a>step-1 解压提取访问</h3><p>解压后将目录中的ThinkPHP文件夹和index.php文件拷入环境根目录任意新建空文件夹中。通过localhost或者127.0.0.1访问本地虚拟服务器环境，访问对应项目。</p>
<h3 id="step-2-文件目录介绍"><a href="#step-2-文件目录介绍" class="headerlink" title="step-2 文件目录介绍"></a>step-2 文件目录介绍</h3><p>打开项目，可见新生成文件夹Application，文件组成及作用如下：</p>
<p><code>Application</code><br><code>├─Common         应用公共模块</code><br><code>│  ├─Common      应用公共函数目录</code><br><code>│  └─Conf        应用公共配置文件目录</code><br><code>├─Home           默认生成的Home模块</code><br><code>│  ├─Conf        模块配置文件目录</code><br><code>│  ├─Common      模块函数公共目录</code><br><code>│  ├─Controller  模块控制器目录</code><br><code>│  ├─Model       模块模型目录</code><br><code>│  └─View        模块视图文件目录</code><br><code>├─Runtime        运行时目录</code><br><code>│  ├─Cache       模版缓存目录</code><br><code>│  ├─Data        数据目录</code><br><code>│  ├─Logs        日志目录</code><br><code>│  └─Temp        缓存目录</code></p>
<p>以上文件中的Common-&gt;Conf-&gt;config.php文件,Home-&gt;Controller-&gt;IndexController.class.php文件,View文件夹为主要操作区域。</p>
<h2 id="从后至前"><a href="#从后至前" class="headerlink" title="从后至前"></a>从后至前</h2><h3 id="step-3-配置文件"><a href="#step-3-配置文件" class="headerlink" title="step-3 配置文件"></a>step-3 配置文件</h3><p>在config.php文件中配置数据库连接，可在数据库中新建一个测试数据库。连接配置如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line">	<span class="comment">//'配置项'=&gt;'配置值'</span></div><div class="line"><span class="comment">//数据库配置信息</span></div><div class="line"><span class="string">'DB_TYPE'</span> =&gt; <span class="string">'mysql'</span>, <span class="comment">// 数据库类型</span></div><div class="line"><span class="string">'DB_HOST'</span> =&gt; <span class="string">'localhost'</span>, <span class="comment">// 服务器地址</span></div><div class="line"><span class="string">'DB_NAME'</span> =&gt; <span class="string">'test'</span>, <span class="comment">// 数据库名</span></div><div class="line"><span class="string">'DB_USER'</span> =&gt; <span class="string">'root'</span>, <span class="comment">// 用户名</span></div><div class="line"><span class="string">'DB_PWD'</span> =&gt; <span class="string">' '</span>, <span class="comment">// 密码</span></div><div class="line"><span class="string">'DB_PORT'</span> =&gt; <span class="number">3306</span>, <span class="comment">// 端口</span></div><div class="line"><span class="string">'DB_PREFIX'</span> =&gt; <span class="string">'test_'</span>, <span class="comment">// 数据库表前缀 </span></div><div class="line"><span class="string">'DB_CHARSET'</span>=&gt; <span class="string">'utf8'</span>, <span class="comment">// 字符集</span></div><div class="line"><span class="string">'DB_DEBUG'</span> =&gt; <span class="keyword">TRUE</span>, <span class="comment">// 数据库调试模式</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="step-4-控制文件"><a href="#step-4-控制文件" class="headerlink" title="step-4 控制文件"></a>step-4 控制文件</h3><p>在IndexController.class.php中实例化数据库，作为控制文件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//实例化数据库表</span></div><div class="line">        $test = M(<span class="string">'test'</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;test=$test-&gt;select();</div><div class="line">        <span class="keyword">$this</span>-&gt;display();</div><div class="line">         &#125;  &#125;</div></pre></td></tr></table></figure>
<h3 id="step-5-模板文件"><a href="#step-5-模板文件" class="headerlink" title="step-5 模板文件"></a>step-5 模板文件</h3><p>在View文件夹下新建Index文件夹 在Index文件夹中新建index.html，作为模板文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">volist</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>&#123;$test.id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>&#123;$test.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">volist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上为数据库字段内容到前台输出的过程。</p>
<p>访问项目即可看到预先在数据库中输入的字段内容。</p>
<p>注：注意所建数据库表前缀与配置文件保持一致。</p>
<h2 id="从前到后"><a href="#从前到后" class="headerlink" title="从前到后"></a>从前到后</h2><p>以一个实际表单提交实例为例：</p>
<h3 id="step-6-模板文件—表单提交"><a href="#step-6-模板文件—表单提交" class="headerlink" title="step-6 模板文件—表单提交"></a>step-6 模板文件—表单提交</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">//表单</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"insertbook"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">class</span>=<span class="string">"basic-grey"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加图书<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>图书编号：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"b_id"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"b_id"</span> <span class="attr">placeholder</span>=<span class="string">"图书编号"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>书名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"b_name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"b_name"</span> <span class="attr">placeholder</span>=<span class="string">"书名"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>作者：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"author"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">placeholder</span>=<span class="string">"作者"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>出版社：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"press"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"press"</span> <span class="attr">placeholder</span>=<span class="string">"出版社"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>出版日期：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"p_date"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"p_date"</span> <span class="attr">placeholder</span>=<span class="string">"出版日期"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 20px;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>版次：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"edition"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"edition"</span> <span class="attr">placeholder</span>=<span class="string">"版次"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>价格：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"price"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">placeholder</span>=<span class="string">"价格"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内容简介 :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"intro"</span> <span class="attr">name</span>=<span class="string">"intro"</span> <span class="attr">placeholder</span>=<span class="string">"内容简介"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>图书分类 :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"c_id"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1001 小说<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1002 人文社科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1003 科技<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputFile"</span> <span class="attr">style</span>=<span class="string">"margin-bottom:20px;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>图书封面 :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">请选择要上传的图片</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">id</span>=<span class="string">"image"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加图书"</span> <span class="attr">name</span>=<span class="string">"sub"</span> <span class="attr">id</span>=<span class="string">"sub"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">//提交</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  $("#sub").click(function() &#123;</div><div class="line">            $("#form").submit();</div><div class="line">        &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>利用jquery控制点击提交，将用户编写好的表单信息发给insertbook方法。</p>
<h3 id="step-7-控制文件—添加数据"><a href="#step-7-控制文件—添加数据" class="headerlink" title="step-7 控制文件—添加数据"></a>step-7 控制文件—添加数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertbook</span><span class="params">()</span></span>&#123;</div><div class="line">                         $add=M(<span class="string">'book'</span>);</div><div class="line">                         $data=I(<span class="string">'post.'</span>);</div><div class="line">                         $upload = <span class="keyword">new</span> \Think\Upload();</div><div class="line">                         $upload-&gt;maxSize   =     <span class="number">3145728</span> ;</div><div class="line">                         $upload-&gt;exts      =     <span class="keyword">array</span>(<span class="string">'jpg'</span>, <span class="string">'gif'</span>, <span class="string">'png'</span>, <span class="string">'jpeg'</span>);</div><div class="line">                         $upload-&gt;rootPath  =     <span class="string">'./Public/'</span>;</div><div class="line">                         $upload-&gt;savePath  =     <span class="string">'images/'</span>;</div><div class="line">                         $upload-&gt;autoSub   =     <span class="keyword">false</span>;</div><div class="line">                         $info   =   $upload-&gt;upload();     </div><div class="line">  <span class="keyword">if</span>(!$info) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;error($upload-&gt;getError());&#125;</div><div class="line">  <span class="keyword">else</span>&#123;   </div><div class="line">    <span class="keyword">foreach</span>($info <span class="keyword">as</span> $file)&#123; </div><div class="line">    $data[<span class="string">'image'</span>]=$file[<span class="string">'savename'</span>];</div><div class="line">    &#125;      <span class="comment">// redirect some where</span></div><div class="line">    &#125; </div><div class="line">$result = $add-&gt;add($data); </div><div class="line"><span class="keyword">if</span>($result)&#123;</div><div class="line">    <span class="comment">//设置成功后跳转页面的地址</span></div><div class="line">    <span class="keyword">$this</span>-&gt;success(<span class="string">'新增成功'</span>, <span class="string">'addbook'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//错误页面的默认跳转页面是返回前一页，通常不需要设置</span></div><div class="line">    <span class="keyword">$this</span>-&gt;error(<span class="string">'新增失败'</span>);</div><div class="line">&#125;                                                             </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>insertbook函数利用I方法接收函数后，判断图片文件是否上传成功，成功则将保存的图片文件名称转给实例化的data表的image字段，然后再判断整体存入data表中的操作是否成功。</p>
<h2 id="删除、更改、查找"><a href="#删除、更改、查找" class="headerlink" title="删除、更改、查找"></a>删除、更改、查找</h2><h3 id="step-8-控制文件—删除"><a href="#step-8-控制文件—删除" class="headerlink" title="step-8 控制文件—删除"></a>step-8 控制文件—删除</h3><p>例：以id和书名匹配搜索后，删除对应书籍的信息。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delebook</span><span class="params">()</span></span></div><div class="line">&#123; </div><div class="line">   $del = M(<span class="string">"book"</span>); <span class="comment">// 实例化User对象</span></div><div class="line">    $map[<span class="string">'b_id'</span>] = $_POST[<span class="string">"b_id"</span>];</div><div class="line">    $map[<span class="string">'b_name'</span>] = $_POST[<span class="string">"b_name"</span>];</div><div class="line">     $map[<span class="string">'_logic'</span>] = <span class="string">'OR'</span>;</div><div class="line">    <span class="comment">// 把查询条件传入查询方法</span></div><div class="line">   $result = $del-&gt;where($map)-&gt;delete();</div><div class="line">    <span class="keyword">if</span>($result)&#123;</div><div class="line">    <span class="comment">//设置成功后跳转页面的地址</span></div><div class="line">    <span class="keyword">$this</span>-&gt;success(<span class="string">'删除成功'</span>, <span class="string">'delbook'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//错误页面的默认跳转页面是返回前一页，通常不需要设置</span></div><div class="line">    <span class="keyword">$this</span>-&gt;error(<span class="string">'删除失败'</span>);</div><div class="line">&#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="step-9-控制文件—更改"><a href="#step-9-控制文件—更改" class="headerlink" title="step-9 控制文件—更改"></a>step-9 控制文件—更改</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">updatebook</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">$book = M(<span class="string">"book"</span>); <span class="comment">// 实例化User对象</span></div><div class="line">$data =I(<span class="string">"post."</span>);</div><div class="line">$book-&gt;save($data); <span class="comment">// 根据条件保存修改的数据</span></div><div class="line"> $result = $data;</div><div class="line">    <span class="keyword">if</span>($result)&#123;</div><div class="line">    <span class="comment">//设置成功后跳转页面的地址</span></div><div class="line">    <span class="keyword">$this</span>-&gt;success(<span class="string">'修改成功'</span>, <span class="string">'editbook'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//错误页面的默认跳转页面是返回前一页，通常不需要设置</span></div><div class="line">    <span class="keyword">$this</span>-&gt;error(<span class="string">'修改失败'</span>);</div><div class="line">&#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="step-10-模板文件—更改"><a href="#step-10-模板文件—更改" class="headerlink" title="step-10 模板文件—更改"></a>step-10 模板文件—更改</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"updatebook"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"basic-grey"</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>请输入修改内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">volist</span> <span class="attr">name</span>=<span class="string">"data"</span> <span class="attr">id</span>=<span class="string">"edit"</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>书名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"book"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;$edit.b_name&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.b_name&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>作者：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"author"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;$edit.author&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.author&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>价格：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"price"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;$edit.price&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.price&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>图书编号：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"b_id"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"b_id"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;$edit.b_id&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.b_id&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>出版社：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"press"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"press"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;$edit.press&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.press&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>出版日期：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"p_date"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"p_date"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;$edit.p_date&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.p_date&#125;"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 20px;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>版次：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"edition"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"edition"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;$edit.edition&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.edition&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内容简介 :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"intro"</span> <span class="attr">name</span>=<span class="string">"intro"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;$edit.intro&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.intro&#125;"</span>&gt;</span>&#123;$edit.intro&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>图书分类 :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"selection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;$edit.c_id&#125;"</span>&gt;</span>&#123;$edit.c_id&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1001 小说<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1003 科技<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">volist</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确认修改"</span> <span class="attr">id</span>=<span class="string">"sub"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过实例化将现存的数据库字段展示到对应位置，通过重新提交表单的方式再次对数据库字段进行重写，达到修改指定地方的目的。</p>
<h3 id="step-11-配置文件—搜索"><a href="#step-11-配置文件—搜索" class="headerlink" title="step-11 配置文件—搜索"></a>step-11 配置文件—搜索</h3><p>在全局配置文件中开启URL路由配置，自定义search方法后接k值。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	<span class="string">'URL_ROUTER_ON'</span>   =&gt; <span class="keyword">true</span>,</div><div class="line">	<span class="string">'URL_ROUTE_RULES'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">	<span class="string">'search/:k'</span>               =&gt; <span class="string">'Index/search'</span>,</div><div class="line">),</div></pre></td></tr></table></figure>
<h3 id="step-12-控制文件—搜索"><a href="#step-12-控制文件—搜索" class="headerlink" title="step-12 控制文件—搜索"></a>step-12 控制文件—搜索</h3><p>通过get方法获取k值转化字符串传递给keyword进行like模糊匹配搜索，搜索范围为指定的几个字段。查询后展示。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"> $keywords = <span class="string">'%'</span>.$_GET[<span class="string">'k'</span>].<span class="string">'%'</span>; </div><div class="line"> $where[<span class="string">'b_id|b_name|author|c_id'</span>] = <span class="keyword">array</span>(<span class="string">'like'</span>,$keywords);</div><div class="line"> <span class="keyword">$this</span>-&gt;data= $data=M(<span class="string">'book'</span>)-&gt;where($where)-&gt;select();</div><div class="line"> $info=$data;</div><div class="line"> <span class="keyword">if</span>($info)&#123; <span class="keyword">$this</span>-&gt;display();&#125;<span class="keyword">else</span>&#123;</div><div class="line">     <span class="keyword">$this</span>-&gt;error(<span class="string">'抱歉，没有找到相关书籍。'</span>);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"list-1 form-group  "</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"keywords"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-xs"</span> <span class="attr">id</span>=<span class="string">"thesearch"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        $("#thesearch").click(function() &#123;</div><div class="line">            location.href = '__URL__/search/k/' + $("#keywords").val();</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>搜索框模板代码如上。</p>
<p>参考<a href="http://www.kancloud.cn/thinkphp/thinkphp_quickstart/2138" target="_blank" rel="external">官网入门手册</a>和<a href="https://www.shiyanlou.com/courses/96" target="_blank" rel="external">实验楼thinkphp框架实践</a>完成。</p>
<p>更多内容请自行探索。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Bootstrap的自适应实施方案]]></title>
      <url>https://feahter.github.io/2016/11/28/%E5%9F%BA%E4%BA%8EBootstrap%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94%E5%AE%9E%E6%96%BD%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h4 id="名由"><a href="#名由" class="headerlink" title="名由"></a>名由</h4><p>bootstrap:意为引导，引导有杠杆的作用。在计算机用语中为引导程序的意思。</p>
<p>很多人会对Bootstrap这个名字感到困惑。英语Bootstrap的意思是靴带，来自短语：“pull oneself up by one′s bootstrap”，18世纪德国文学家拉斯伯（Rudolf Erich Raspe）的小说《巴龙历险记（或译为终极天将）》（Adventures of Baron Munchausen) 记述道：“巴龙掉到湖里沉到湖底，在他绝望的时候，他用自己靴子上的带子把自己拉了上来。”现意指不借助别人的力量，凭自己的努力，终于获得成功。统计学里“bootstrap”法是指用原样本自身的数据抽样得出新的样本及统计量，根据其意现在普遍将其译为“自助法”。</p>
<p>下面引用的是谢益辉博士关于Bootstrap （和 Jackknife）基本思想的论述，让我们对于Bootstrap 建立一个初步的关于统计学的认识：</p>
<p>在统计的世界，我们面临的总是只有样本，Where there is sample, there is uncertainty，正因为不确定性的存在，才使统计能够生生不息。传说统计学家、数学家和物理学家乘坐一列火车上旅行，路上看到草原上有一只黑羊，统计学家说，“基于这个样本来看，这片草原上所有的羊都是黑的”，数学家说，“只有眼前这只羊是黑的”，物理学家则说，“你们都不对，只有羊的这一面是黑的”。这是关于统计和其他学科的一个玩笑话，说明了统计的一些特征，比如基于样本推断总体。</p>
<p>一般情况下，总体永远都无法知道，我们能利用的只有样本，现在的问题是，样本该怎样利用呢？Bootstrap的奥义也就是：既然样本是抽出来的，那我何不从样本中再抽样（Resample）？Jackknife的奥义在于：既然样本是抽出来的，那我在作估计、推断的时候“扔掉”几个样本点看看效果如何？既然人们要质疑估计的稳定性，那么我们就用样本的样本去证明吧。</p>
<p>John Fox的那一系列附录中有一篇叫“Bootstrapping Regression Models”，当我看到第二页用方框框标出那句话时，我才对Bootstrap的思想真正有了了解（之前迷茫了很长时间）。Bootstrap的一般的抽样方式都是“有放回地全抽”（其实样本量也要视情况而定，不一定非要与原样本量相等），意思就是抽取的Bootstrap样本量与原样本相同，只是在抽样方式上采取有放回地抽，这样的抽样可以进行B次，每次都可以求一个相应的统计量/估计量，最后看看这个统计量的稳定性如何（用方差表示）。Jackknife的抽样痕迹不明显，但主旨也是取样本的样本，在作估计推断时，每次先排除一个或者多个样本点，然后用剩下的样本点求一个相应的统计量，最后也可以看统计量的稳定性如何。</p>
<p>在R中简单随机抽样的函数是sample()，其中有个参数replacement表示是否放回，经典的抽样基本都是不放回（replace = FALSE），而Bootstrap则是replace = TRUE；从FALSE到TRUE，小小的一个变化，孕育了Bootstrap的经典思想。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><a href="https://github.com/twbs/bootstrap" target="_blank" rel="external">Bootstrap</a>，作者:<a href="https://github.com/mdo" target="_blank" rel="external">Mark Otto</a>和<a href="http://twitter.com/fat" target="_blank" rel="external">Jacob Thornton</a>。Twitter推出的CSS框架。</p>
<p>移动优先的自适应解决方案。</p>
<p><a href="http://getbootstrap.com/" target="_blank" rel="external">官网</a></p>
<p><a href="http://www.bootcss.com/" target="_blank" rel="external">中文网站</a></p>
<p><a href="http://v3.bootcss.com/getting-started/" target="_blank" rel="external">起步文档</a></p>
<p>在要使用的html文件头引入（本地或者CDN均可）bootstrap.min.css文件即可开始使用。例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//本地</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span>&gt;</span></div><div class="line">//CDN</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="关于自适应"><a href="#关于自适应" class="headerlink" title="关于自适应"></a>关于自适应</h3><p>为了确保适当的绘制和触屏缩放，添加meta标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加 <code>user-scalable=no</code> 可以禁止屏幕缩放。这样禁用缩放后，用户的视口只能滚动屏幕，就能让你的网站在移动端看上去更像原生应用。但不推荐所有网站使用，请视自己的需求而定。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从浏览器内核入手优化兼容：</p>
<p>添加meta标签，如果网页以IE8内核浏览器打开，如果安装了GCF（Google Chrome Frame谷歌内嵌浏览器框架GCF），则使用GCF来渲染页面，如果未安装GCF，则使用最高版本的IE内核进行渲染。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加meta标签，双核浏览器时（主要针对国产360浏览器），使浏览器默认使用极速模式（webkit内核）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>bootstrap的栅格系统基于媒体查询，为了使IE8兼容媒体查询和部分html5的标签，在head标签闭合前加入如下代码段（如果浏览器内核为IE9及其以下版本时调用文件）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lte IE 9]&gt;</span></div><div class="line">  &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</div><div class="line">  &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">  &lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>注意前端代码的模块化组织，降低css选择器的重复性，以大的模块区分功能块。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>.container-fluid（100%宽度）与.container（固定宽度）选其一作为最外侧的盒子，依据为内容是否要占据全部视口。.row作为缓冲带必须嵌套有。lg大屏（&gt;=1200px），md中屏(&gt;=992px)，sm小屏(&gt;=768px)，xs超小屏(&lt;768px)。将外层div均分为12等分，可以任意设置组合，每个col自带15px的padding属性，在每个col中放置内容。栅格系统是自适应布局的核心。根据模块添加类.hidden-md可实现对应尺寸隐藏，达到响应式目的。</p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>如果想要兼容IE8，则尽量<strong>避免使用css3属性</strong>和IE8不兼容的属性（如：background-size，min-height），减少hack工作量。在样式文件中参考bootstrap的屏幕尺寸划分使用媒体查询，或单独针对特定移动端屏幕尺寸适配，也可结合，但须注意css文件渲染顺序为<strong>从上至下，后者覆盖前者</strong>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//大屏</div><div class="line">@media (max-width:1200px) &#123;</div><div class="line">  .class&#123;...&#125;</div><div class="line">&#125;</div><div class="line">//中屏</div><div class="line">@media (max-width:992px) &#123;</div><div class="line">  .class&#123;...&#125;</div><div class="line">&#125;</div><div class="line">//小屏</div><div class="line">@media (max-width:768px) &#123;</div><div class="line">  .class&#123;...&#125;</div><div class="line">&#125;</div><div class="line">//iphone6 Plus</div><div class="line">@media (max-width:414px) &#123;</div><div class="line">  .class&#123;...&#125;</div><div class="line">&#125;</div><div class="line">//iphone6 </div><div class="line">@media (max-width:375px) &#123;</div><div class="line">  .class&#123;...&#125;</div><div class="line">&#125;</div><div class="line">//iphone5 </div><div class="line">@media (max-width:320px) &#123;</div><div class="line">  .class&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="bootstrap常用辅助类归纳"><a href="#bootstrap常用辅助类归纳" class="headerlink" title="bootstrap常用辅助类归纳"></a>bootstrap常用辅助类归纳</h3><table>
<thead>
<tr>
<th style="text-align:center">类名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.text-center(left or right)</td>
<td style="text-align:center">文字对齐方式</td>
</tr>
<tr>
<td style="text-align:center">.center-block</td>
<td style="text-align:center">设置元素为 display:block 并居中显示</td>
</tr>
<tr>
<td style="text-align:center">.clearfix</td>
<td style="text-align:center">清除浮动</td>
</tr>
<tr>
<td style="text-align:center">.pull-left(or right)</td>
<td style="text-align:center">元素浮动到左边（右边）</td>
</tr>
<tr>
<td style="text-align:center">.show(.hidden)</td>
<td style="text-align:center">强制元素显示（隐藏）</td>
</tr>
<tr>
<td style="text-align:center">.text-hide</td>
<td style="text-align:center">将页面元素所包含的文本内容替换为背景图</td>
</tr>
<tr>
<td style="text-align:center">.close</td>
<td style="text-align:center">显示关闭按钮</td>
</tr>
<tr>
<td style="text-align:center">.caret</td>
<td style="text-align:center">显示下拉式功能</td>
</tr>
<tr>
<td style="text-align:center">.img-responsive</td>
<td style="text-align:center">图片自适应</td>
</tr>
</tbody>
</table>
<p>注：更多请参考文档，或阅读源码，举例，以下为导航条的类：</p>
<ul>
<li>.navbar——设置nav元素为导航条组件；</li>
<li>.navbar-default——指定导航条组件为默认主题；</li>
<li>.navbar-inverse——指定导航条组件为黑色主题；</li>
<li>.navbar-fixed-top——设置导航条组件固定在顶部；</li>
<li>.navbar-fixed-bottom——设置导航条组件固定在底部；</li>
<li>.navbar-header——主要指定div元素为导航条组件包裹品牌图标及切换按钮；</li>
<li>.navbar-toggle——设置button元素为导航条组件的切换钮；</li>
<li>.collapsed——设置button元素为在视口小于768px时才显示；</li>
<li>.navbar-brand——设置导航条组件内的品牌图标；</li>
<li>.collapse——设置div元素为视口大于768px时显示；</li>
<li>.navbar-collapse——设置div元素为导航条组件各列表项的父元素；</li>
<li>.navbar-nav——设置ul为导航条组件内的列表元素;</li>
<li>.navbar-left——设置导航条内元素向左对齐；</li>
<li>.navbar-right——设置导航条内元素向右对齐；</li>
<li>.navbar-form——为导航条组件内部的表单组件；</li>
<li>.navbar-btn——为导航条组件内部的按钮样式；</li>
<li>.navbar-text——为导航条组件内部的文本样式；</li>
<li>.navbar-link——在标准的导航组件之外添加标准链接，让链接有正确的颜色和反色设置；</li>
<li>.breadcrumb——设置列表元素显示为路径导航组件；</li>
</ul>
<h3 id="关于BS的JavaScript插件"><a href="#关于BS的JavaScript插件" class="headerlink" title="关于BS的JavaScript插件"></a>关于BS的JavaScript插件</h3><p>bootstrap的JS插件基于JQ2.0以上，而JQ2.0以后不再支持IE8，要求兼容性的需要寻找合适的兼容性较好的插件引用。推荐看:<a href="http://www.bootcss.com/中文网下推荐的一些项目。" target="_blank" rel="external">http://www.bootcss.com/中文网下推荐的一些项目。</a></p>
<p>例，推荐轮播插件<a href="https://github.com/stevenwanderski/bxslider-4" target="_blank" rel="external">bxslider</a>，结合jquery使用达到响应式目的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/jquery.bxslider.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">	        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	        	<span class="keyword">var</span> _width=$(<span class="built_in">window</span>).width();</div><div class="line">	         <span class="keyword">if</span> (_width&gt;<span class="number">768</span>) &#123;$(<span class="string">'.slider'</span>).bxSlider(&#123;</div><div class="line">	            slideWidth: <span class="number">265</span>,</div><div class="line">	            minSlides: <span class="number">4</span>,</div><div class="line">	            maxSlides: <span class="number">4</span>,</div><div class="line">	            slideMargin: <span class="number">30</span></div><div class="line">	          &#125;);&#125;</div><div class="line">	         <span class="keyword">else</span>&#123;</div><div class="line">				  $(<span class="string">'.slider'</span>).bxSlider(&#123;</div><div class="line">	            slideWidth: _width<span class="number">-30</span>,</div><div class="line">	            minSlides: <span class="number">1</span>,</div><div class="line">	            maxSlides: <span class="number">2</span>,</div><div class="line">	            controls: <span class="literal">false</span>,</div><div class="line">	            mode: <span class="string">'fade'</span></div><div class="line">	          &#125;);		  </div><div class="line">				  &#125;</div><div class="line">	        &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>https://feahter.github.io/2016/11/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
<h2 id="什么是-GOF（四人帮，全拼-Gang-of-Four）？"><a href="#什么是-GOF（四人帮，全拼-Gang-of-Four）？" class="headerlink" title="什么是 GOF（四人帮，全拼 Gang of Four）？"></a>什么是 GOF（四人帮，全拼 Gang of Four）？</h2><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 的书，该书首次提到了软件开发中设计模式的概念。</p>
<p>四位作者合称 <strong>GOF（四人帮，全拼 Gang of Four）</strong>。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p>
<ul>
<li>对接口编程而不是对实现编程。</li>
<li>优先使用对象组合而不是继承。</li>
</ul>
<h2 id="设计模式的使用"><a href="#设计模式的使用" class="headerlink" title="设计模式的使用"></a>设计模式的使用</h2><p>设计模式在软件开发中的两个主要用途。</p>
<h3 id="开发人员的共同平台"><a href="#开发人员的共同平台" class="headerlink" title="开发人员的共同平台"></a>开发人员的共同平台</h3><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p>
<h3 id="最佳的实践"><a href="#最佳的实践" class="headerlink" title="最佳的实践"></a>最佳的实践</h3><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p>
<h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>模式 &amp; 描述</th>
<th>包括</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>创建型模式</strong>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用新的运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td>
<td>工厂模式（Factory Pattern）抽象工厂模式（Abstract Factory Pattern）单例模式（Singleton Pattern）建造者模式（Builder Pattern）原型模式（Prototype Pattern）</td>
</tr>
<tr>
<td>2</td>
<td><strong>结构型模式</strong>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td>
<td>适配器模式（Adapter Pattern）桥接模式（Bridge Pattern）过滤器模式（Filter、Criteria Pattern）组合模式（Composite Pattern）装饰器模式（Decorator Pattern）外观模式（Facade Pattern）享元模式（Flyweight Pattern）代理模式（Proxy Pattern）</td>
</tr>
<tr>
<td>3</td>
<td><strong>行为型模式</strong>这些设计模式特别关注对象之间的通信。</td>
<td>责任链模式（Chain of Responsibility Pattern）命令模式（Command Pattern）解释器模式（Interpreter Pattern）迭代器模式（Iterator Pattern）中介者模式（Mediator Pattern）备忘录模式（Memento Pattern）观察者模式（Observer Pattern）状态模式（State Pattern）空对象模式（Null Object Pattern）策略模式（Strategy Pattern）模板模式（Template Pattern）访问者模式（Visitor Pattern）</td>
</tr>
<tr>
<td>4</td>
<td><strong>J2EE 模式</strong>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</td>
<td>MVC 模式（MVC Pattern）业务代表模式（Business Delegate Pattern）组合实体模式（Composite Entity Pattern）数据访问对象模式（Data Access Object Pattern）前端控制器模式（Front Controller Pattern）拦截过滤器模式（Intercepting Filter Pattern）服务定位器模式（Service Locator Pattern）传输对象模式（Transfer Object Pattern）</td>
</tr>
</tbody>
</table>
<p>下面用一个图片来整体描述一下设计模式之间的关系：</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt="设计模式之间的关系"></p>
<h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p>
<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>
<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>
<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>
<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>
<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>
<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[御魂-妖怪分布统计]]></title>
      <url>https://feahter.github.io/2016/10/12/%E9%98%B4%E9%98%B3%E5%B8%88-%E5%BE%A1%E9%AD%82-%E5%A6%96%E6%80%AA%E5%88%86%E5%B8%83%E7%BB%9F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="阴阳师-御魂-妖怪分布统计"><a href="#阴阳师-御魂-妖怪分布统计" class="headerlink" title="阴阳师-御魂-妖怪分布统计"></a>阴阳师-御魂-妖怪分布统计</h1><h2 id="御魂副本第一层"><a href="#御魂副本第一层" class="headerlink" title="御魂副本第一层"></a>御魂副本第一层</h2><p>一回合：骨女x1、天邪鬼黄x1、天邪鬼青x1</p>
<p>二回合：山童x1、涂壁x1、独眼小僧x1</p>
<p>三回合：八歧大蛇x1、鬼赤x2</p>
<h2 id="御魂副本第二层"><a href="#御魂副本第二层" class="headerlink" title="御魂副本第二层"></a>御魂副本第二层</h2><p>一回合：妖狐x1、鲤鱼精x1、河童x1</p>
<p>二回合：吸血姬x1、萤草x1、兵俑x1</p>
<p>三回合：八歧大蛇x1、童女x2</p>
<h2 id="御魂副本第三层"><a href="#御魂副本第三层" class="headerlink" title="御魂副本第三层"></a>御魂副本第三层</h2><p>一回合：樱花妖x1、蝴蝶精x1、青蛙瓷器x1</p>
<p>二回合：海坊主x1、鲤鱼精x1、椒图x1</p>
<p>三回合：八歧大蛇x1、座敷童子x2</p>
<h2 id="御魂副本第四层"><a href="#御魂副本第四层" class="headerlink" title="御魂副本第四层"></a>御魂副本第四层</h2><p>一回合：犬神x1、童男x1、童女x1</p>
<p>二回合：大天狗x1、小黑x1、小白x1</p>
<p>三回合：八歧大蛇x1、食梦貘x2</p>
<h2 id="御魂副本第五层"><a href="#御魂副本第五层" class="headerlink" title="御魂副本第五层"></a>御魂副本第五层</h2><p>一回合：镰鼬x1、骨女x1、丑时之女x1</p>
<p>二回合：傀儡师x1、跳跳哥哥x1、独眼小僧x1</p>
<p>三回合：八歧大蛇x1、孟婆x2</p>
<h2 id="御魂副本第六层"><a href="#御魂副本第六层" class="headerlink" title="御魂副本第六层"></a>御魂副本第六层</h2><p>一回合：雨女x1、孟婆x1、座敷童子x1</p>
<p>二回合：阎魔x1、巫蛊师x1、鸦天狗x1</p>
<p>三回合：八歧大蛇x1、骨女x2</p>
<h2 id="御魂副本第七层："><a href="#御魂副本第七层：" class="headerlink" title="御魂副本第七层："></a>御魂副本第七层：</h2><p>一回合：凤凰火X1、食发鬼X1、丑女X1</p>
<p>二回合：酒吞X1、琴师X1、山兔X1</p>
<p>三回合：八歧大蛇x1、荒川X2</p>
<h2 id="御魂副本第八层："><a href="#御魂副本第八层：" class="headerlink" title="御魂副本第八层："></a>御魂副本第八层：</h2><p>一回合：饿鬼X1、管狐X1、判官X1</p>
<p>二回合：蝴蝶精X1、椒图X1、白狼X1</p>
<p>三回合：八歧大蛇x1、茨木X2</p>
<h2 id="御魂副本第九层："><a href="#御魂副本第九层：" class="headerlink" title="御魂副本第九层："></a>御魂副本第九层：</h2><p>一回合：椒图X1、骨女X1、莹草X1 </p>
<p>二回合：清姬X1、食梦貘X1、狸猫X1</p>
<p>三回合：八歧大蛇x1、两面佛X2</p>
<h2 id="御魂副本第十层："><a href="#御魂副本第十层：" class="headerlink" title="御魂副本第十层："></a>御魂副本第十层：</h2><p>一回合：觉X1、二口女X1、莹草X1</p>
<p>二回合：青行灯X1、椒图X1、酒吞童子X1</p>
<p>三回合：八歧大蛇x1、大天狗X2</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[探索-妖怪分布统计]]></title>
      <url>https://feahter.github.io/2016/10/12/%E9%98%B4%E9%98%B3%E5%B8%88-%E6%8E%A2%E7%B4%A2-%E5%A6%96%E6%80%AA%E5%88%86%E5%B8%83%E7%BB%9F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="阴阳师-探索-妖怪分布统计"><a href="#阴阳师-探索-妖怪分布统计" class="headerlink" title="阴阳师-探索-妖怪分布统计"></a>阴阳师-探索-妖怪分布统计</h1><h2 id="探索副本第一章"><a href="#探索副本第一章" class="headerlink" title="探索副本第一章"></a>探索副本第一章</h2><p>天邪鬼绿1——天邪鬼绿x1、提灯小僧x2</p>
<p>天邪鬼绿2——天邪鬼绿x1、灯笼鬼x2</p>
<p>提灯小僧1——天邪鬼绿x2、提灯小僧x1</p>
<p>提灯小僧2——灯笼鬼x2、提灯小僧x1</p>
<p>首领：九命猫——九命猫x3</p>
<h2 id="探索副本第二章"><a href="#探索副本第二章" class="headerlink" title="探索副本第二章"></a>探索副本第二章</h2><p>帚神——帚神x1、寄生魂x1、盗墓小鬼x1</p>
<p>盗墓小鬼1——寄生魂x2、盗墓小鬼x1</p>
<p>盗墓小鬼2——灯笼鬼x2、盗墓小鬼x1</p>
<p>寄生魂1——灯笼鬼x2、寄生魂x1</p>
<p>寄生魂2——盗墓小鬼x2、寄生魂x1</p>
<p>首领：座敷童子——座敷童子x1、天邪鬼绿x2、天邪鬼青x1</p>
<h2 id="探索副本第三章"><a href="#探索副本第三章" class="headerlink" title="探索副本第三章"></a>探索副本第三章</h2><p>天邪鬼黄1——天邪鬼黄x1、帚神x2、涂壁x1</p>
<p>天邪鬼黄2——天邪鬼黄x1、童女x3</p>
<p>赤舌1——赤舌x1、提灯小僧x1、灯笼鬼x2 、二回合 鸦天狗</p>
<p>赤舌2——赤舌x1、鬼黄x1、童女x2 二回合 鸦天狗</p>
<p>兵俑1——兵俑x1、提灯小僧x1、童女x2</p>
<p>兵俑2——兵俑x1、提灯小僧x1、灯笼鬼x2</p>
<p>首领：凤凰火——凤凰火x1 寄生魂x3</p>
<h2 id="探索副本第四章"><a href="#探索副本第四章" class="headerlink" title="探索副本第四章"></a>探索副本第四章</h2><p>帚神1——帚神x1、涂壁x2</p>
<p>帚神2——帚神x1、涂壁x1、唐纸伞妖x2</p>
<p>唐纸伞妖1——唐纸伞妖x1、天邪鬼赤x3</p>
<p>唐纸伞妖2——唐纸伞妖x1、天邪鬼赤x1、涂壁x2</p>
<p>天邪鬼赤1——天邪鬼赤x1、唐纸伞妖x1、涂壁x2</p>
<p>天邪鬼赤2——天邪鬼赤x1、唐纸伞妖x2</p>
<p>首领：雨女——雨女x1、青蛙瓷器x1、帚神x2</p>
<h2 id="探索副本第五章"><a href="#探索副本第五章" class="headerlink" title="探索副本第五章"></a>探索副本第五章</h2><p>涂壁1——涂壁x1、源博雅的神兽(?)x1、天邪鬼赤x2</p>
<p>涂壁2——涂壁x1、天邪鬼赤x3</p>
<p>帚神1——帚神x1、天邪鬼赤x1、涂壁x2</p>
<p>帚神2——帚神x1、天邪鬼赤x1、天邪鬼黄x2</p>
<p>管狐1——管狐x2、天邪鬼黄x2 二回合 寄生魂x1</p>
<p>管狐2——管狐x1、天邪鬼绿x3 二回合 寄生魂x1</p>
<p>首领：食发鬼——食发鬼x1、灯笼鬼x1、天邪鬼青x2</p>
<h2 id="探索副本第六章"><a href="#探索副本第六章" class="headerlink" title="探索副本第六章"></a>探索副本第六章</h2><p>灯笼鬼——灯笼鬼x1、帚神x3</p>
<p>天邪鬼青——天邪鬼青x1、天邪鬼绿x3</p>
<p>蝴蝶精——蝴蝶精x1、涂壁x1、天邪鬼赤x2 二回合 三尾狐x1</p>
<p>首领：巫蛊师——巫蛊师x1、天邪鬼绿x3</p>
<h2 id="探索副本第七章"><a href="#探索副本第七章" class="headerlink" title="探索副本第七章"></a>探索副本第七章</h2><p>鲤鱼精1——鲤鱼精x3、帚神x1</p>
<p>鲤鱼精2——鲤鱼精x1、帚神x3</p>
<p>河童1——河童x1、鲤鱼精x1、涂壁x2</p>
<p>河童2——河童x1、灯笼鬼x1、跳跳犬x2</p>
<p>提灯小僧12——提灯小僧x1、跳跳犬x3、二回合-管狐x1</p>
<p>提灯小僧3——提灯小僧x1、跳跳犬x1、鲤鱼精x2、二回合-管狐x1</p>
<p>首领：妖狐——妖狐x1、涂壁x1、座敷童子x2、二回合-管狐x1、寄生魂x1、天邪鬼赤x2</p>
<h2 id="探索副本第八章"><a href="#探索副本第八章" class="headerlink" title="探索副本第八章"></a>探索副本第八章</h2><p>唐纸伞妖1——伞妖x1、帚神x3</p>
<p>唐纸伞妖2——伞妖x1、山童x1、帚神x2</p>
<p>樱花妖1——樱花妖x1、帚神x1、涂壁x2、二回合-雪女x1</p>
<p>樱花妖2——樱花妖x1、涂壁x3、二回合-雪女x1</p>
<p>天邪鬼绿——天邪鬼绿x1、天邪鬼青x1、天邪鬼黄x2</p>
<p>首领：桃花妖——桃花妖x1、天邪鬼青x1、提灯小僧x2、二回合-樱花妖x1、帚神x1、蝴蝶精x2</p>
<h2 id="探索副本第九章"><a href="#探索副本第九章" class="headerlink" title="探索副本第九章"></a>探索副本第九章</h2><p>提灯小僧1——提灯小僧x1、灯笼鬼x3</p>
<p>提灯小僧2——提灯小僧x1、灯笼鬼x1、铁鼠x2</p>
<p>铁鼠1——铁鼠x1、帚神x3</p>
<p>铁鼠2——铁鼠x2、帚神x2</p>
<p>山兔1——山兔x3、铁鼠x1、二回合-鸦天狗</p>
<p>山兔2——山兔x4、二回合-鸦天狗</p>
<p>首领：孟婆——孟婆x1、饿鬼x3、二回合-孟婆x1、灯笼鬼x1、鸦天狗x2</p>
<h2 id="探索副本第十章"><a href="#探索副本第十章" class="headerlink" title="探索副本第十章"></a>探索副本第十章</h2><p>丑时之女——丑时之女x1、傀儡师x1、天邪鬼青x2</p>
<p>傀儡师1——傀儡师x1、觉x1、狸猫x2</p>
<p>傀儡师2——傀儡师x1、觉x1、座敷童子x2、二回合-犬神x1</p>
<p>觉1——觉x1、狸猫x3</p>
<p>觉2——觉x1、赤舌x1、座敷童子x2、二回合-犬神x1</p>
<p>首领：酒吞童子——酒吞童子x1、跳跳哥哥x1、食发鬼x2、二回合-酒吞童子x1、兵俑x1、骨女x2</p>
<h2 id="探索副本第十一章"><a href="#探索副本第十一章" class="headerlink" title="探索副本第十一章"></a>探索副本第十一章</h2><p>武士之灵1——武士之灵x1、寄生魂x3</p>
<p>武士之灵2——武士之灵x1、独眼小僧x3</p>
<p>独眼小僧1——独眼小僧x1、涂壁x1、天邪鬼赤x2</p>
<p>独眼小僧2——独眼小僧x1、管狐x1、天邪鬼赤x2</p>
<p>饿鬼1——饿鬼x1、涂壁x1、管狐x2</p>
<p>饿鬼2——饿鬼x3、管狐x1</p>
<p>首领：鬼女红叶——鬼女红叶x1、童女x1、天邪鬼青x2、二回合-鬼女红叶x1、骨女x1、觉x2</p>
<h2 id="探索副本第十二章"><a href="#探索副本第十二章" class="headerlink" title="探索副本第十二章"></a>探索副本第十二章</h2><p>海坊主1——海坊主x1、帚神x1、涂壁x2</p>
<p>海坊主2——海坊主x1、涂壁x1、鸦天狗x2</p>
<p>童男1——童男x1、天邪鬼黄x1、鸦天狗x2</p>
<p>童男2——童男x1、童女x1、鸦天狗x2</p>
<p>童女1——童女x1、盗墓小鬼x1、提灯小僧x2、二回合-雪女x1</p>
<p>童女2——童女x3、盗墓小鬼x1、二回合-雪女x1</p>
<p>首领：雪女——雪女x1、寄生魂x1、武士之灵x2、二回合-雪女x1、跳跳妹妹x1、跳跳哥哥x2</p>
<h2 id="探索副本第十三章"><a href="#探索副本第十三章" class="headerlink" title="探索副本第十三章"></a>探索副本第十三章</h2><p>饿鬼12——饿鬼x1 、天邪鬼赤x3</p>
<p>饿鬼3——饿鬼x1 、天邪鬼赤x3、二回合-首无x1</p>
<p>唐纸伞妖12——唐纸伞妖x1、鬼赤x1、天邪鬼绿x2</p>
<p>唐纸伞妖3——唐纸伞妖x1、鬼赤x1、天邪鬼绿x2、二回合-首无x1</p>
<p>首领：首无——首无x1、骨女x1、灯笼鬼x1、山兔x1</p>
<h2 id="探索副本第十四章"><a href="#探索副本第十四章" class="headerlink" title="探索副本第十四章"></a>探索副本第十四章</h2><p>帚神123——帚神x1、天邪鬼赤x3</p>
<p>涂壁12——涂壁x6</p>
<p>涂壁3——涂壁x6、二回合-食梦貘x1</p>
<p>首领：食梦貘——食梦貘x1、天邪鬼赤x3、二回合-食梦貘x4</p>
<h2 id="探索副本第十五章"><a href="#探索副本第十五章" class="headerlink" title="探索副本第十五章"></a>探索副本第十五章</h2><p>天邪鬼绿123——天邪鬼绿x1、赤舌x1、天邪鬼赤x2</p>
<p>提灯小僧12——提灯小僧x1、赤舌x1、九命猫x2</p>
<p>提灯小僧3——提灯小僧x1、赤舌x1、九命猫x2、二回合-大天狗x1</p>
<p>首领：跳跳妹妹——跳跳妹妹x1、九命猫x3</p>
<h2 id="探索副本第十六章"><a href="#探索副本第十六章" class="headerlink" title="探索副本第十六章"></a>探索副本第十六章</h2><p>饿鬼123——饿鬼x1、山兔x1、山童x2</p>
<p>赤舌12——赤舌x1、寄生魂x3</p>
<p>赤舌3——赤舌x1、寄生魂x3、二回合-赤舌x1</p>
<p>首领：判官——判官x1、小黑x1、小白x1</p>
<h2 id="探索副本第十七章"><a href="#探索副本第十七章" class="headerlink" title="探索副本第十七章"></a>探索副本第十七章</h2><p>鸦天狗123——鸦天狗x1、觉醒风小怪x3</p>
<p>狸猫12——狸猫x1、觉醒火小怪x3</p>
<p>狸猫3——狸猫x1、觉醒火小怪x3、二回合-暗凤凰(?)x1</p>
<p>首领：荒川之主——荒川之主x1、灯笼鬼x1、骨女x1、山兔x1</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ST3私人定制]]></title>
      <url>https://feahter.github.io/2016/09/13/ST3%E7%A7%81%E4%BA%BA%E5%AE%9A%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><strong>ST3的私人订制。</strong></p>
<h2 id="一、官网下载安装"><a href="#一、官网下载安装" class="headerlink" title="一、官网下载安装"></a>一、官网下载安装</h2><p><strong>1.</strong><a href="http://www.sublimetext.com/3" target="_blank" rel="external"><strong>官网</strong></a><strong>下载。</strong></p>
<p><strong>2.软件安装。</strong></p>
<h2 id="二、正版激活"><a href="#二、正版激活" class="headerlink" title="二、正版激活"></a>二、正版激活</h2><p><strong>Sublime Text 3 许可证</strong></p>
<p><em>—– BEGIN LICENSE —–</em><br><em>Nicolas Hennion</em><br><em>Single User License</em><br><em>EA7E-866075</em><br><em>8A01AA83 1D668D24 4484AEBC 3B04512C</em><br><em>827B0DE5 69E9B07A A39ACCC0 F95F5410</em><br><em>729D5639 4C37CECB B2522FB3 8D37FDC1</em><br><em>72899363 BBA441AC A5F47F08 6CD3B3FE</em><br><em>CEFB3783 B2E1BA96 71AAF7B4 AFB61B1D</em><br><em>0CC513E7 52FF2333 9F726D2C CDE53B4A</em><br><em>810C0D4F E1F419A3 CDA0832B 8440565A</em><br><em>35BF00F6 4CA9F869 ED10E245 469C233E</em><br><em>—— END LICENSE ——</em></p>
<p><strong>1.打开Sublime菜单 &gt; help &gt; enter License</strong></p>
<p><strong>2.复制填入如上许可证或自行搜索一枚，确认激活。</strong></p>
<h2 id="三、插件管理器安装"><a href="#三、插件管理器安装" class="headerlink" title="三、插件管理器安装"></a>三、插件管理器安装</h2><p><strong>1.<code>ctrl+~</code> 打开ST自带控制台，复制如下代码至输入框，回车等待。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</div></pre></td></tr></table></figure>
<p><strong>2.安装完成后，重启ST，至工具栏 Preferences 见到Package Control 项即安装成功</strong>。(</p>
<p>Package Control 用于ST插件的管理，安装、卸载、更新等工作。</p>
<p>)</p>
<h2 id="四、插件安装"><a href="#四、插件安装" class="headerlink" title="四、插件安装"></a>四、插件安装</h2><p><strong>1.插件安装</strong><br><code>Ctrl+Shift+P</code>打开插件管理器，输入框输入install，选择安装插件功能，等待弹出安装框，复制或填入要安装的插件名称，回车等待。(每一个插件安装的过程如上，部分安装不了的可能需要科学上网。)<br><strong>插件表：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">插件</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ChineseLocalization</td>
<td style="text-align:center">汉化</td>
</tr>
<tr>
<td style="text-align:center">HTML5</td>
<td style="text-align:center">H5标签拓展</td>
</tr>
<tr>
<td style="text-align:center">JsFormat</td>
<td style="text-align:center">javascript格式化</td>
</tr>
<tr>
<td style="text-align:center">CSS Format</td>
<td style="text-align:center">CSS</td>
</tr>
<tr>
<td style="text-align:center">Tag</td>
<td style="text-align:center">HTML</td>
</tr>
<tr>
<td style="text-align:center">Brackethighlighter</td>
<td style="text-align:center">标签对标记</td>
</tr>
<tr>
<td style="text-align:center">styleToken</td>
<td style="text-align:center">标记颜色代码</td>
</tr>
<tr>
<td style="text-align:center">SideBarEnhancements</td>
<td style="text-align:center">增强型侧边栏</td>
</tr>
<tr>
<td style="text-align:center">BufferScroll</td>
<td style="text-align:center">代码折叠状态保留</td>
</tr>
<tr>
<td style="text-align:center">Emmet</td>
<td style="text-align:center">前端神器</td>
</tr>
<tr>
<td style="text-align:center">FileHeader</td>
<td style="text-align:center">文件模板，保存文件修改时间</td>
</tr>
<tr>
<td style="text-align:center">Better Completion</td>
<td style="text-align:center">全能代码提示</td>
</tr>
<tr>
<td style="text-align:center">ConvertToUTF8</td>
<td style="text-align:center">GBK编码兼容</td>
</tr>
<tr>
<td style="text-align:center">PackageResourceViewer</td>
<td style="text-align:center">插件</td>
</tr>
</tbody>
</table>
<p><strong>2.用户设置</strong></p>
<p>工具栏 Preferences – Settings-User，打开用户设置文件<br>选择性填入如下内容：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">"trim_trailing_white_space_on_save": true,</div><div class="line">"ensure_newline_at_eof_on_save": true,</div><div class="line">"translate_tabs_to_spaces": true,</div><div class="line">"tab_size": 2,</div><div class="line">"draw_minimap_border": true,</div><div class="line">"save_on_focus_lost": true,</div><div class="line">"highlight_line": true,</div><div class="line">"word_wrap": "true",</div><div class="line">"fade_fold_buttons": false,</div><div class="line">"bold_folder_labels": true,</div><div class="line">"highlight_modified_tabs": true,</div><div class="line">"default_line_ending": "unix", </div><div class="line">"auto_find_in_selection": true</div></pre></td></tr></table></figure></p>
<p>trim_trailing_white_space_on_save,自动移除行尾多余空格。<br>ensure_newline_at_eof_on_save,文件末尾自动保留一个空行，防止文件在某些开发环境失效。<br>translate_tabs_to_spaces,代码 tab 对齐转换为空格对齐，<br>tab_size,配合设置空格数。这个需求因人而异了，不喜欢可以去掉。<br>draw_minimap_border,用于右侧代码预览时给所在区域加上边框，方便识别。<br>save_on_focus_lost,窗口失焦立即保存文件，嘛嘛再也不用担心你忘记保存了。<br>highlight_line,当前行高亮。<br>word_wrap,设置自动换行。<br>fade_fold_buttons,默认显示行号右侧的代码段闭合展开三角号。<br>bold_folder_labels,侧边栏文件夹显示加粗，区别于文件。<br>highlight_modified_tabs,高亮未保存文件。<br>default_line_ending: “unix”,使用 unix 风格的换行符。<br>auto_find_in_selection: true,开启选中范围内搜索(而不是整个文档)</p>
<p><strong>3.快捷键设置</strong></p>
<p>工具栏 Preferences – key Bindings-User 打开用户按键绑定</p>
<p>选择性填入如下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123; "keys": ["alt+space"], "command": "auto_complete" &#125;,</div><div class="line">&#123; "keys": ["alt+space"], "command": "replace_completion_with_auto_complete", "context":</div><div class="line">  [</div><div class="line">    &#123; "key": "last_command", "operator": "equal", "operand": "insert_best_completion" &#125;,</div><div class="line">    &#123; "key": "auto_complete_visible", "operator": "equal", "operand": false &#125;,</div><div class="line">    &#123; "key": "setting.tab_completion", "operator": "equal", "operand": true &#125;</div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line">&#123; "keys": ["ctrl+alt+d"], "command": "goto_definition" &#125;,</div></pre></td></tr></table></figure>
<p>ST3默认的代码提示快捷键为 <code>ctrl + space</code> ，但是这个快捷键在天朝一直都被输入法霸占Mac用户泥奏凯 ，修改快捷键为 <code>alt+space</code> 。<br>ST3自带跳转到函数或CSS定义功能，在DreamWeaver中使用 <code>ctrl+d</code> 打开CSS样式定义源面板。</p>
<p>使用<code>ctrl+alt+d</code> 定义这个功能，ST3默认的 <code>ctrl+d</code> 已有选择相同字符的用途。</p>
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>ctrl+shift+p</strong></td>
<td style="text-align:center">所有命令</td>
</tr>
<tr>
<td style="text-align:center">ctrl+g</td>
<td style="text-align:center">跳转行</td>
</tr>
<tr>
<td style="text-align:center">ctrl+/</td>
<td style="text-align:center">注释</td>
</tr>
<tr>
<td style="text-align:center">ctrl+d</td>
<td style="text-align:center">选择相同字符</td>
</tr>
<tr>
<td style="text-align:center">ctrl+shift+up/down</td>
<td style="text-align:center">整行移动</td>
</tr>
<tr>
<td style="text-align:center">ctrl+alt+right</td>
<td style="text-align:center">跳到下一个编辑点</td>
</tr>
<tr>
<td style="text-align:center">ctrl+u</td>
<td style="text-align:center">图片原始大小更新</td>
</tr>
<tr>
<td style="text-align:center">ctrl+shift+g</td>
<td style="text-align:center">批量格式生成</td>
</tr>
<tr>
<td style="text-align:center">ctrl+shift+y</td>
<td style="text-align:center">直接公式计算</td>
</tr>
<tr>
<td style="text-align:center">ctrl+up</td>
<td style="text-align:center">CSS数值加减1（alt+up 数值加减0.1）</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery操作dom元素]]></title>
      <url>https://feahter.github.io/2016/09/13/jQuery%E6%93%8D%E4%BD%9Cdom%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<p><a href="http://www.w3school.com.cn/jquery/jquery_ref_manipulation.asp" target="_blank" rel="external">http://www.w3school.com.cn/jquery/jquery_ref_manipulation.asp</a><br>| <a href="http://www.w3school.com.cn/jquery/attributes_addclass.asp" target="_blank" rel="external">addClass()</a> | 向匹配的元素添加指定的类名。              |<br>| —————————————- | ————————— |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_after.asp" target="_blank" rel="external">after()</a> | 在匹配的元素之后插入内容。               |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_append.asp" target="_blank" rel="external">append()</a> | 向匹配的元素内部追加内容。               |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_appendto.asp" target="_blank" rel="external">appendTo()</a> | 向匹配的元素内部追加内容。               |<br>| <a href="http://www.w3school.com.cn/jquery/attributes_attr.asp" target="_blank" rel="external">attr()</a> | 设置或返回匹配元素的属性和值。             |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_before.asp" target="_blank" rel="external">before()</a> | 在每个匹配的元素之前插入内容。             |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_clone.asp" target="_blank" rel="external">clone()</a> | 创建匹配元素集合的副本。                |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_detach.asp" target="_blank" rel="external">detach()</a> | 从 DOM 中移除匹配元素集合。            |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_empty.asp" target="_blank" rel="external">empty()</a> | 删除匹配的元素集合中所有的子节点。           |<br>| <a href="http://www.w3school.com.cn/jquery/attributes_hasclass.asp" target="_blank" rel="external">hasClass()</a> | 检查匹配的元素是否拥有指定的类。            |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_html.asp" target="_blank" rel="external">html()</a> | 设置或返回匹配的元素集合中的 HTML 内容。     |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_insertafter.asp" target="_blank" rel="external">insertAfter()</a> | 把匹配的元素插入到另一个指定的元素集合的后面。     |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_insertbefore.asp" target="_blank" rel="external">insertBefore()</a> | 把匹配的元素插入到另一个指定的元素集合的前面。     |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_prepend.asp" target="_blank" rel="external">prepend()</a> | 向每个匹配的元素内部前置内容。             |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_perpendto.asp" target="_blank" rel="external">prependTo()</a> | 向每个匹配的元素内部前置内容。             |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_remove.asp" target="_blank" rel="external">remove()</a> | 移除所有匹配的元素。                  |<br>| <a href="http://www.w3school.com.cn/jquery/attributes_removeattr.asp" target="_blank" rel="external">removeAttr()</a> | 从所有匹配的元素中移除指定的属性。           |<br>| <a href="http://www.w3school.com.cn/jquery/attributes_removeclass.asp" target="_blank" rel="external">removeClass()</a> | 从所有匹配的元素中删除全部或者指定的类。        |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_replaceall.asp" target="_blank" rel="external">replaceAll()</a> | 用匹配的元素替换所有匹配到的元素。           |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_replacewith.asp" target="_blank" rel="external">replaceWith()</a> | 用新内容替换匹配的元素。                |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_text.asp" target="_blank" rel="external">text()</a> | 设置或返回匹配元素的内容。               |<br>| <a href="http://www.w3school.com.cn/jquery/attributes_toggleclass.asp" target="_blank" rel="external">toggleClass()</a> | 从匹配的元素中添加或删除一个类。            |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_unwrap.asp" target="_blank" rel="external">unwrap()</a> | 移除并替换指定元素的父元素。              |<br>| <a href="http://www.w3school.com.cn/jquery/attributes_val.asp" target="_blank" rel="external">val()</a> | 设置或返回匹配元素的值。                |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_wrap.asp" target="_blank" rel="external">wrap()</a> | 把匹配的元素用指定的内容或元素包裹起来。        |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_wrapall.asp" target="_blank" rel="external">wrapAll()</a> | 把所有匹配的元素用指定的内容或元素包裹起来。      |<br>| <a href="http://www.w3school.com.cn/jquery/manipulation_wrapinner.asp" target="_blank" rel="external">wrapinner()</a> | 将每一个匹配的元素的子内容用指定的内容或元素包裹起来。 |</p>
<p>获取dom获取表单</p>
<p>document.getElementsByTagName（”from”）;</p>
<p>使用dom获取 某元素src属性的方法</p>
<p>element.getAttribute(“src”); </p>
<p>利用jquery操作dom</p>
<ol>
<li>利用jquery进行文档处理</li>
</ol>
<p>2.1：外部插入</p>
<p><strong>after(content)</strong></p>
<p>在每个匹配的元素之后插入内容。</p>
<p>返回值</p>
<p>jQuery</p>
<p>参数</p>
<p>content (String, dom, jQuery) : 插入到每个目标后的内容</p>
<p>示例</p>
<p>在所有段落之后插入一些HTML标记代码。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p>

<p>jQuery 代码:</p>
<p>$(“p”).after(“<b>Hello</b>“);</p>
<p>结果:</p>
<p>I would like to say: </p><b>Hello</b><br><br>在所有段落之后插入一个DOM元素。<br><br>HTML 代码:<br><br><b id="foo">Hello</b><p>I would like to say: </p>

<p>jQuery 代码:</p>
<p><strong>$(“p”).after( $(“#foo”)[0] );//**</strong>将jquery<strong><strong>对象转换为dom</strong></strong>对象$(“#foo”)[0]**</p>
<p>结果:</p>
<p>I would like to say: </p><b id="foo">Hello</b><br><br>在所有段落中后插入一个jQuery对象(类似于一个DOM元素数组)。<br><br>HTML 代码:<br><br><b>Hello</b><p>I would like to say: </p>

<p>jQuery 代码:</p>
<p><strong>$(“p”).after( $(“b”) );</strong></p>
<p>结果:</p>
<p>I would like to say: </p><b>Hello</b><br><br>before(content)在每个匹配的元素之前插入内容。<br><br>返回值<br><br>jQuery<br><br>参数<br><br>content (String, Element, jQuery) : 插入到每个目标前的内容<br><br>示例<br><br>在所有段落之前插入一些HTML标记代码。<br><br>HTML 代码:<br><br><p>I would like to say: </p>

<p>jQuery 代码:</p>
<p>$(“p”).before(“<b>Hello</b>“);</p>
<p>结果:   [ <b>Hello</b></p><p>I would like to say: </p> ]<p></p>
<p>在所有段落之前插入一个元素。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><b id="foo">Hello</b><br><br>jQuery 代码:<br><br>$(“p”).before( $(“#foo”)[0] );<br><br>结果:<br><br><b id="foo">Hello</b><p>I would like to say: </p>

<p>在所有段落中前插入一个jQuery对象(类似于一个DOM元素数组)。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><b>Hello</b><br><br>jQuery 代码:<br><br>$(“p”).before( $(“b”) );<br><br>结果:<br><br><b>Hello</b><p>I would like to say: </p>

<p><strong>insertAfter(content)</strong></p>
<p>把所有匹配的元素插入到另一个、指定的元素元素集合的后面。</p>
<p>实际上，使用这个方法是颠倒了常规的$(A).after(B)的操作，即不是把B插入到A后面，而是把A插入到B后面。</p>
<p>返回值jQuery</p>
<p>参数 content (String) : 用于匹配元素的jQuery表达式</p>
<p>示例</p>
<p>在所有段落之后插入一个元素。与 $(“#foo”).after(“p”)相同</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><div id="foo">Hello</div><br><br>jQuery 代码:<br><br>$(“p”).insertAfter($(“#foo“)); <strong> **</strong>在$(“#foo“)<strong>**在它后面插入段落P</strong><br><br>结果:<br><br><div id="foo">Hello</div><p>I would like to say: </p>

<p>insertBefore(content)</p>
<p>把所有匹配的元素插入到另一个、指定的元素元素集合的前面。</p>
<p>实际上，使用这个方法是颠倒了常规的$(A).before(B)的操作，即不是把B插入到A前面，而是把A插入到B前面。</p>
<p>返回值jQuery</p>
<p>参数 content (String) : 用于匹配元素的jQuery表达式</p>
<p>示例</p>
<p>在所有段落之前插入一个元素。与 $(“#foo”).before(“p”)相同。</p>
<p>HTML 代码:</p>
<div id="foo">Hello</div><p>I would like to say: </p><br><br>jQuery 代码:<br><br>$(“p”).insertBefore($(“#foo“));   在$(“#foo“)前面插入段落p<br><br>结果:<br><br><p>I would like to say: </p><div id="foo">Hello</div>



<p>2.2: 内部插入</p>
<p><strong>append(content)</strong></p>
<p>向每个匹配的元素内部追加内容。</p>
<p>这个操作与对指定的元素执行appendChild方法，将它们添加到文档中的情况类似。</p>
<p>返回值jQuery</p>
<p><strong>参数 content (String, Element, jQuery) : **</strong>要追加到目标中的内容**</p>
<p>示例 ：向所有段落中追加一些HTML标记。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p>

<p>jQuery 代码:</p>
<p>$(“p”).append(“<b>Hello</b>“);   <strong>在p**</strong>元素之间插入 b<strong>**元素</strong></p>
<p>结果:</p>
<p>[ </p><p>I would like to say: <b>Hello</b></p> ]<p></p>
<p>appendTo(content)</p>
<p>把所有匹配的元素追加到另一个、指定的元素元素集合中。</p>
<p>实际上，使用这个方法是颠倒了常规的$(A).append(B)的操作，即不是把B追加到A中，而是把A追加到B中。</p>
<p>返回值jQuery</p>
<p>参数content (String) :用于被追加的内容</p>
<p>示例</p>
<p>把所有段落追加到ID值为foo的元素中。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><div id="foo"></div><br><br>jQuery 代码:<br><br>$(“p”).appendTo($(“#foo“)); <strong>P**</strong>元素被添加到div<strong><strong>元素#foo</strong></strong>之中<strong><br><br>结果:<br><br><div id="foo"><p>I would like to say: </p></div>

</strong>prepend(content)**<br><br>向每个匹配的元素内部前置内容。<br><br>这是向所有匹配元素内部的开始处插入内容的最佳方式。<br><br>返回值jQuery<br><br>参数content (String, Element, jQuery) : 要插入到目标元素内部前端的内容<br><br>示例<br><br>向所有段落中前置一些HTML标记代码。<br><br>HTML 代码:<br><br><p>I would like to say: </p>

<p>jQuery 代码:</p>
<p>$(“p”).prepend(“<b>Hello</b>“);   //将<b>Hello</b>添加到p标签内容前</p>
<p>结果:</p>
<p>[ </p><p><b>Hello</b>I would like to say: </p> ]<p></p>
<p>将一个DOM元素前置入所有段落</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><br><p>I would like to say: </p><br><b class="foo">Hello</b><br><b class="foo">Good Bye</b><br><br>jQuery 代码:<br><br>$(“p”).prepend( $(“.foo”)[0] );<br><br>结果:<br><br><p><b class="foo">Hello</b>I would like to say: </p><br><p><b class="foo">Hello</b>I would like to say: </p><br><b class="foo">Hello</b><br><b class="foo">Good Bye</b><br><br>向所有段落中前置一个jQuery对象(类似于一个DOM元素数组)。<br><br>HTML 代码:<br><br><p>I would like to say: </p><b>Hello</b><br><br>jQuery 代码:<br><br>$(“p”).prepend( $(“b”) );<br><br>结果:<br><br><p><b>Hello</b>I would like to say: </p>

<p><strong>prependTo(content)</strong></p>
<p>把所有匹配的元素前置到另一个、指定的元素元素集合中。</p>
<p>实际上，使用这个方法是颠倒了常规的$(A).prepend(B)的操作，即不是把B前置到A中，而是把A前置到B中。</p>
<p>返回值jQuery</p>
<p>参数content (String) :用于匹配元素的jQuery表达式</p>
<p>示例</p>
<p>把所有段落追加到ID值为foo的元素中。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><div id="foo"></div><br><br>jQuery 代码:<br><br>$(“p”).prependTo($(“#foo“));  <strong>把所有段落插入到div foo**</strong>中<strong><br><br>结果:<br><br><div id="foo"><p>I would like to say: </p></div> 2.3:

</strong>包裹<strong>**</strong><br><br>}       <strong>wrap(html)</strong><br><br>把所有匹配的元素用其他元素的结构化标记包裹起来。<br><br>这种包装对于在文档中插入额外的结构化标记最有用，而且它不会破坏原始文档的语义品质。 这个函数的原理是检查提供的第一个元素（它是由所提供的HTML标记代码动态生成的），并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包裹元素。<br><br><br><br>当HTML标记代码中的元素包含文本时无法使用这个函数。因此，如果要添加文本应该在包裹完成之后再行添加。<br><br>返回值jQuery<br><br>参数<br><br>html (String) : HTML标记代码字符串，用于动态生成元素并包裹目标元素<br><br>示例<br><br>把所有的段落用一个新创建的div包裹起来<br><br>HTML 代码:<br><br><p>Test Paragraph.</p>

<p>jQuery 代码:</p>
<p>$(“p”).wrap(“<div class="wrap"></div>“); 段落P用div class=’wrap’包裹起来</p>
<p>结果:</p>
<p><strong>Test Paragraph.</strong></p>
<p>wrap(elem)</p>
<p>把所有匹配的元素用其他元素的结构化标记包装起来。</p>
<p>返回值jQuery</p>
<p>参数elem (Element) : 用于包装目标元素的DOM元素</p>
<p>}         示例</p>
<p>}         用ID是”content”的div将每一个段落包裹起来</p>
<p>}         HTML 代码:</p>
<p>}         </p><p>Test Paragraph.</p><div id="content"></div><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).wrap(document.getElementById(‘content’));</p>
<p>}         结果:</p>
<p>}         <div id="content"><p>Test Paragraph.</p></div><div id="content"></div></p>
<p><strong>wrapAll(html)</strong></p>
<p>将所有匹配的元素用单个元素包裹起来</p>
<p>这于 ‘.wrap()’ 是不同的，’.wrap()’为每一个匹配的元素都包裹一次。 这种包装对于在文档中插入额外的结构化标记最有用，而且它不会破坏原始文档的语义品质。</p>
<p>这个函数的原理是检查提供的第一个元素并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包装元素。</p>
<p>返回值jQuery</p>
<p>参数html (String) : TML标记代码字符串，用于动态生成元素并包装目标元素</p>
<p>示例</p>
<p>用一个生成的div将所有段落包裹起来</p>
<p>}         HTML 代码:</p>
<p>}         </p><p>Hello</p><p>cruel</p><p>World</p><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).wrapAll(“<div></div>“);  //如果是wrap 则 每个段落P都被div包裹</p>
<p>}         结果:</p>
<p>}         <div><p>Hello</p><p>cruel</p><p>World</p></div></p>
<p><strong>wrapAll(elem)</strong></p>
<p>将所有匹配的元素用单个元素包裹起来</p>
<p>这于 ‘.wrap()’ 是不同的，’.wrap()’为每一个匹配的元素都包裹一次。</p>
<p>返回值jQuery</p>
<p>参数elem (Element) : 用于包装目标元素的DOM元素</p>
<p>示例</p>
<p>用一个生成的div将所有段落包裹起来</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“p”).wrapAll(document.createElement(“div”));</p>
<p>结果:</p>
<div><p>Hello</p><p>cruel</p><p>World</p></div>

<p><strong>wrapInner(html)</strong></p>
<p>将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来</p>
<p>这个函数的原理是检查提供的第一个元素（它是由所提供的HTML标记代码动态生成的），并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包装元素。</p>
<p>返回值jQuery</p>
<p>参数html (String) : HTML标记代码字符串，用于动态生成元素并包装目标元素</p>
<p>示例</p>
<p>把所有段落内的每个子内容加粗</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“p”).wrapInner(“<b></b>“);</p>
<p>结果:</p>
<p><b>Hello</b></p><p><b>cruel</b></p><p><b>World</b></p>

<p><strong>wrapInner(elem)</strong></p>
<p>将每一个匹配的元素的子内容(包括文本节点)用DOM元素包裹起来</p>
<p>返回值jQuery</p>
<p>参数elem (Element) : 用于包装目标元素的DOM元素</p>
<p>示例</p>
<p>把所有段落内的每个子内容加粗</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“p”).wrapInner(document.createElement(“b”));</p>
<p>结果:</p>
<p><b>Hello</b></p><p><b>cruel</b></p><p><b>World</b></p>









<p><strong>2.4: **</strong>替换<strong>**</strong></p>
<p><strong>replaceWith(content)</strong></p>
<p>将所有匹配的元素替换成指定的HTML或DOM元素。</p>
<p>返回值</p>
<p>jQuery</p>
<p>参数</p>
<p>content (String, Element, jQuery) : 用于将匹配元素替换掉的内容</p>
<p>示例</p>
<p>把所有的段落标记替换成加粗的标记。</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“p”).replaceWith(“<b>Paragraph. </b>“);</p>
<p>结果:</p>
<p><b>Paragraph. </b><b>Paragraph. </b><b>Paragraph. </b></p>
<p><strong>replaceAll(selector) **</strong>去替换<strong>**</strong></p>
<p>用匹配的元素替换掉所有 selector匹配到的元素。</p>
<p>返回值jQuery</p>
<p>参数selector (选择器) : 用于查找<strong>所要被替换的元素</strong></p>
<p>示例</p>
<p>把所有的段落标记替换成加粗标记</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“<b>Paragraph. </b>“).replaceAll(“p”);  </p>
<p>结果:</p>
<p><b>Paragraph. </b><b>Paragraph. </b><b>Paragraph. </b></p>
<p><strong>2.5: **</strong>删除<strong>**</strong></p>
<p>}       <strong>empty()</strong></p>
<p>删除匹配的元素集合中所有的子节点。</p>
<p>返回值jQuery</p>
<p>示例把所有段落的子元素（包括文本节点）删除</p>
<p>HTML 代码:</p>
<p>Hello, <span>Person</span> <a href="#">and person</a></p>

<p>jQuery 代码:</p>
<p>$(“p”).empty();  <strong>删除p**</strong>中所有内容**</p>
<p>结果:</p>
<p></p>



<p><strong>remove([expr])</strong></p>
<p>从DOM中删除所有匹配的元素。</p>
<p>这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。</p>
<p>返回值jQuery</p>
<p>参数expr (String) : (可选) 用于筛选元素的jQuery表达式</p>
<p>示例从DOM中把所有段落删除</p>
<p>HTML 代码:</p>
<p>Hello</p> how are <p>you?</p>

<p>jQuery 代码:</p>
<p>$(“p”).remove(); <strong>//**</strong>移除p<strong>**标签</strong></p>
<p>结果:</p>
<p>how are</p>
<p>从DOM中把带有hello类的段落删除</p>
<p>}         HTML 代码:</p>
<p>}         </p><p class="hello">Hello</p> how are <p>you?</p><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).remove(“.hello”);</p>
<p>}         结果:</p>
<p>}         how are </p><p>you?</p><p></p>
<p><strong>2.6: **</strong>复制<strong>**</strong></p>
<p><strong>clone()</strong></p>
<p>克隆匹配的DOM元素并且选中这些克隆的副本。</p>
<p>在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用。</p>
<p>返回值jQuery</p>
<p>示例克隆所有b元素（并选中这些克隆的副本），然后将它们前置到所有段落中。</p>
<p>HTML 代码:</p>
<p><b>Hello</b></p><p>, how are you?</p><p></p>
<p>jQuery 代码:</p>
<p>$(“b”).clone().prependTo(“p”);  <strong>将b**</strong>标签赋值到p<strong><strong>标签中,</strong></strong>没有clone <strong>**就会直接插入到p</strong></p>
<p>结果:</p>
<p><b>Hello</b></p><p><b>Hello</b>, how are you?</p><p></p>
<hr>
<hr>
<hr>
<hr>
<hr>
<p><strong>clone(true)</strong></p>
<p>元素以及其所有的事件处理并且选中这些克隆的副本</p>
<p>在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用。</p>
<p>返回值jQuery</p>
<p><strong>参数true (Boolean) : **</strong>设置为true<strong>**以便复制元素的所有事件处理</strong></p>
<p>示例</p>
<p>创建一个按钮，他可以复制自己，并且他的副本也有同样功能。</p>
<p>HTML 代码:</p>
<button>Clone Me!</button>

<p>jQuery 代码:</p>
<p>$(“button”).click(function(){<br>  $(this).clone(true).insertAfter(this);</p>
<p><strong>//**</strong>复制 <strong><strong>当前元素包含他的事件 </strong></strong>并将副本插入到当前元素前面**});</p>
<p>二、jQuery遍历与查找节点</p>
<p>Ø       过滤</p>
<p>Ø       查找</p>
<p>Ø       串联</p>
<p>1.1、jQuery过滤</p>
<p><strong>eq(index)**</strong>获取第N<strong>**个元素</strong></p>
<p>这个元素的位置是从0算起。</p>
<p>返回值jQuery</p>
<p>参数index (Integer) :元素在jQuery对象中的索引</p>
<p>示例</p>
<p>获取匹配的第二个元素</p>
<p>HTML 代码:</p>
<p> This is just a test.</p> <p> So is this</p>

<p>jQuery 代码:</p>
<p>$(“p”).eq(1)</p>
<p>结果:</p>
<p>[ </p><p> So is this</p> ]<p></p>
<p><strong>hasClass(class) **</strong>查找类**</p>
<p>检查当前的元素是否含有某个特定的类，如果有，则返回true。</p>
<p>这其实就是 is(“.” + class)。</p>
<p>返回值Boolean</p>
<p>参数class (String) : 用于匹配的类名</p>
<p>示例：给包含有某个类的元素进行一个动画。</p>
<p>HTML 代码:</p>
<div class="protected"></div><div></div>

<p>jQuery 代码:</p>
<p>$(“div”).click(function(){<br>  if ( $(this).hasClass(“protected”) )<br>    $(this)<br>      .animate({ left: -10 })<br>      .animate({ left: 10 })<br>      .animate({ left: -10 })<br>      .animate({ left: 10 })<br>      .animate({ left: 0 });<br>});</p>
<p><strong>is(expr)</strong></p>
<p>用一个表达式来检查当前选择的元素集合，如果其中至少有一个元素符合这个给定的表达式就返回true。</p>
<p>如果没有元素符合，或者表达式无效，都返回’false’. ‘filter’ 内部实际也是在调用这个函数，所以，filter()函数原有的规则在这里也适用。</p>
<p>返回值Boolean</p>
<p>参数expr (String) :用于筛选的表达式</p>
<p>示例：由于input元素的父元素是一个表单元素，所以返回true。</p>
<p>HTML 代码:</p>
 <form><input type="checkbox"></form>

<p>jQuery 代码:</p>
<p>$(“input[type=’checkbox’]”).parent().is(“form”) // parent()父元素</p>
<p>结果:</p>
<p>true</p>
<p>1.2、jQuery查找</p>
<p><strong>find(expr)</strong></p>
<p>搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法。</p>
<p>所有搜索都依靠jQuery表达式来完成。这个表达式可以使用CSS1-3的选择器语法来写。</p>
<p>返回值jQuery</p>
<p>参数：expr (String) :用于查找的表达式</p>
<p>示例：从所有的段落开始，进一步搜索下面的span元素。与$(“p span”)相同。</p>
<p>}         HTML 代码:</p>
<p>}         </p><p><span>Hello</span>, how are you?</p><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).find(“span”)</p>
<p>}         结果:</p>
<p>}         [ <span>Hello</span> ]</p>
<p><strong>next([expr])</strong></p>
<p>取得一个包含匹配的元素集合中每一个元素<strong>紧邻的后面同辈</strong>元素的元素集合。</p>
<p>这个函数只返回后面那个紧邻的同辈元素，而不是后面<strong>所有的同辈元素（可以使用**</strong>nextAll<strong>**）。</strong>可以用一个可选的表达式进行筛选。</p>
<p>返回值jQuery</p>
<p>参数expr (String) : (可选) 用于筛选的表达式</p>
<p>}         示例找到每个段落的后面紧邻的同辈元素。</p>
<p>}         HTML 代码:</p>
<p>}         </p><p>Hello</p><p>Hello Again</p><div><span>And Again</span></div><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).next()</p>
<p>}         结果:</p>
<p>}         [ </p><p>Hello Again</p>, <div><span>And Again</span></div> ]<p></p>
<p><strong>找到每个段落的后面紧邻的同辈元素中类名为selected**</strong>的元素。**</p>
<p>}         HTML 代码:</p>
<p>}         </p><p>Hello</p><p class="selected">Hello Again</p><div><span>And Again</span></div><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).next(“.selected”)</p>
<p>}         结果:</p>
<p>}         [ </p><p class="selected">Hello Again</p> ]<p></p>
<p><strong>1.3**</strong>、<strong><strong>jQuery</strong></strong>串联<strong>**</strong></p>
<p>}       <strong>andSelf()</strong></p>
<p><strong>加入先前所选的加入当前元素中</strong></p>
<p><strong>对于筛选或查找后的元素，要加入先前所选元素时将会很有用。</strong></p>
<p>返回值jQuery</p>
<p>示例:选取所有div以及内部的p，并加上border类</p>
<p>HTML 代码:</p>
<div><p>First Paragraph</p><p>Second Paragraph</p></div>

<p>jQuery 代码:</p>
<p>$(“div”).find(“p”).andSelf().addClass(“border”);</p>
<p>//div中寻找段落P，和他自己（andSelf）加类class=”border”</p>
<p>结果:</p>
<div class="border"><p class="border">First Paragraph</p><p class="border">Second Paragraph</p></div>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery 的选择器]]></title>
      <url>https://feahter.github.io/2016/09/13/jQuery%20%E7%9A%84%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法 </p>
<p>$(“#myELement”)    选择id值等于myElement的元素，id值不能重复在文档中只能有一个id值是myElement所以得到的是唯一的元素<br>$(“div”)           选择所有的div标签元素，返回div元素数组<br>$(“.myClass”)      选择使用myClass类的css的所有元素<br>$(“<em>“)             选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(“#myELement,div,.myclass”)<br>层叠选择器：<br>$(“form input”)         选择所有的form元素中的input元素<br>$(“#main &gt; </em>“)          选择id值为main的所有的子元素<br>$(“label + input”)     选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素<br>$(“#prev ~ div”)       同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签 </p>
<p>基本过滤选择器：<br>$(“tr:first”)               选择所有tr元素的第一个<br>$(“tr:last”)                选择所有tr元素的最后一个<br>$(“input:not(:checked) + span”)   </p>
<p>过滤掉：checked的选择器的所有的input元素 </p>
<p>$(“tr:even”)               选择所有的tr元素的第0，2，4… …个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始） </p>
<p>$(“tr:odd”)                选择所有的tr元素的第1，3，5… …个元素<br>$(“td:eq(2)”)             选择所有的td元素中序号为2的那个td元素<br>$(“td:gt(4)”)             选择td元素中序号大于4的所有td元素<br>$(“td:ll(4)”)              选择td元素中序号小于4的所有的td元素<br>$(“:header”)<br>$(“div:animated”)<br>内容过滤选择器： </p>
<p>$(“div:contains(‘John’)”) 选择所有div中含有John文本的元素<br>$(“td:empty”)           选择所有的为空（也不包括文本节点）的td元素的数组<br>$(“div:has(p)”)        选择所有含有p标签的div元素<br>$(“td:parent”)          选择所有的以td为父节点的元素数组<br>可视化过滤选择器： </p>
<p>$(“div:hidden”)        选择所有的被hidden的div元素<br>$(“div:visible”)        选择所有的可视化的div元素<br>属性过滤选择器： </p>
<p>$(“div[id]”)              选择所有含有id属性的div元素<br>$(“input[name=’newsletter’]”)    选择所有的name属性等于’newsletter’的input元素 </p>
<p>$(“input[name!=’newsletter’]”) 选择所有的name属性不等于’newsletter’的input元素 </p>
<p>$(“input[name^=’news’]”)         选择所有的name属性以’news’开头的input元素<br>$(“input[name$=’news’]”)         选择所有的name属性以’news’结尾的input元素<br>$(“input[name*=’man’]”)          选择所有的name属性包含’news’的input元素 </p>
<p>$(“input[id][name$=’man’]”)    可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素 </p>
<p>子元素过滤选择器： </p>
<p>$(“ul li:nth-child(2)”),$(“ul li:nth-child(odd)”),$(“ul li:nth-child(3n + 1)”) </p>
<p>$(“div span:first-child”)          返回所有的div元素的第一个子节点的数组<br>$(“div span:last-child”)           返回所有的div元素的最后一个节点的数组<br>$(“div button:only-child”)       返回所有的div中只有唯一一个子节点的所有子节点的数组 </p>
<p>表单元素选择器： </p>
<p>$(“:input”)                  选择所有的表单输入元素，包括input, textarea, select 和 button </p>
<p>$(“:text”)                     选择所有的text input元素<br>$(“:password”)           选择所有的password input元素<br>$(“:radio”)                   选择所有的radio input元素<br>$(“:checkbox”)            选择所有的checkbox input元素<br>$(“:submit”)               选择所有的submit input元素<br>$(“:image”)                 选择所有的image input元素<br>$(“:reset”)                   选择所有的reset input元素<br>$(“:button”)                选择所有的button input元素<br>$(“:file”)                     选择所有的file input元素<br>$(“:hidden”)               选择所有类型为hidden的input元素或表单的隐藏域 </p>
<p>表单元素过滤选择器： </p>
<p>$(“:enabled”)             选择所有的可操作的表单元素<br>$(“:disabled”)            选择所有的不可操作的表单元素<br>$(“:checked”)            选择所有的被checked的表单元素<br>$(“select option:selected”) 选择所有的select 的子元素中被selected的元素 </p>
<p>选取一个 name 为”S_03_22″的input text框的上一个td的text值<br>$(”input[@ name =S_03_22]“).parent().prev().text() </p>
<p>名字以”S_”开始，并且不是以”_R”结尾的值</p>
<p>$(“ input[@ name ^=’ S_’]”).not(“[@ <code>name $=&#39;_R</code>‘]”) </p>
<p>一个名为 radio_01的radio所选的值<br>$(”input[@ name =radio_01][@checked]“).val(); </p>
<p>$(“A B”) 查找A元素下面的所有子节点，包括非直接子节点<br>$(“A&gt;B”) 查找A元素下面的直接子节点<br>$(“A+B”) 查找A元素后面的兄弟节点，包括非直接子节点<br>$(“A~B”) 查找A元素后面的兄弟节点，不包括非直接子节点 </p>
<ol>
<li>$(“A B”) 查找A元素下面的所有子节点，包括非直接子节点 </li>
</ol>
<p>例子：找到表单中所有的 input 元素 </p>
<p>HTML 代码: </p>
<p><form></form></p>
<p><label>Name:</label></p>
<p><input name="name"></p>
<p><fieldset><br>      <label>Newsletter:</label><br>      <input name="newsletter"><br></fieldset><br></p>
<p><input name="none"><br>jQuery 代码: </p>
<p>$(“form input”)<br>结果: </p>
<p>[ <input name="name">, <input name="newsletter"> ] </p>
<ol>
<li>$(“A&gt;B”) 查找A元素下面的直接子节点<br>例子：匹配表单中所有的子级input元素。 </li>
</ol>
<p>HTML 代码: </p>
<p><form></form></p>
<p><label>Name:</label></p>
<p><input name="name"></p>
<p><fieldset><br>      <label>Newsletter:</label><br>      <input name="newsletter"><br></fieldset><br></p>
<p><input name="none"><br>jQuery 代码: </p>
<p>$(“form &gt; input”)<br>结果: </p>
<p>[ <input name="name"> ] </p>
<ol>
<li>$(“A+B”) 查找A元素后面的兄弟节点，包括非直接子节点<br>例子：匹配所有跟在 label 后面的 input 元素 </li>
</ol>
<p>HTML 代码: </p>
<p><form></form></p>
<p><label>Name:</label></p>
<p><input name="name"></p>
<p><fieldset><br>      <label>Newsletter:</label><br>      <input name="newsletter"><br></fieldset><br></p>
<p><input name="none"><br>jQuery 代码: </p>
<p>$(“label + input”)<br>结果: </p>
<p>[ <input name="name">, <input name="newsletter"> ] </p>
<ol>
<li>$(“A~B”) 查找A元素后面的兄弟节点，不包括非直接子节点<br>例子：找到所有与表单同辈的 input 元素 </li>
</ol>
<p>HTML 代码: </p>
<p><form></form></p>
<p><label>Name:</label></p>
<p><input name="name"></p>
<p><fieldset><br>      <label>Newsletter:</label><br>      <input name="newsletter"><br></fieldset><br></p>
<p><input name="none"><br>jQuery 代码: </p>
<p>$(“form ~ input”)<br>结果: </p>
<p>[ <input name="none"> ] </p>
]]></content>
    </entry>
    
  
  
</search>
