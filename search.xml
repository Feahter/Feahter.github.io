<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>https://feahter.github.io/2016/09/07/jquery%E6%93%8D%E4%BD%9Cdom%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h2 id="jquery操作dom元素"><a href="#jquery操作dom元素" class="headerlink" title="jquery操作dom元素"></a>jquery操作dom元素</h2><p><a href="http://www.w3school.com.cn/jquery/jquery_ref_manipulation.asp" target="_blank" rel="external">http://www.w3school.com.cn/jquery/jquery_ref_manipulation.asp</a></p>
<table>
<thead>
<tr>
<th><a href="http://www.w3school.com.cn/jquery/attributes_addclass.asp" target="_blank" rel="external">addClass()</a></th>
<th>向匹配的元素添加指定的类名。</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_after.asp" target="_blank" rel="external">after()</a></td>
<td>在匹配的元素之后插入内容。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_append.asp" target="_blank" rel="external">append()</a></td>
<td>向匹配的元素内部追加内容。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_appendto.asp" target="_blank" rel="external">appendTo()</a></td>
<td>向匹配的元素内部追加内容。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/attributes_attr.asp" target="_blank" rel="external">attr()</a></td>
<td>设置或返回匹配元素的属性和值。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_before.asp" target="_blank" rel="external">before()</a></td>
<td>在每个匹配的元素之前插入内容。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_clone.asp" target="_blank" rel="external">clone()</a></td>
<td>创建匹配元素集合的副本。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_detach.asp" target="_blank" rel="external">detach()</a></td>
<td>从 DOM 中移除匹配元素集合。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_empty.asp" target="_blank" rel="external">empty()</a></td>
<td>删除匹配的元素集合中所有的子节点。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/attributes_hasclass.asp" target="_blank" rel="external">hasClass()</a></td>
<td>检查匹配的元素是否拥有指定的类。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_html.asp" target="_blank" rel="external">html()</a></td>
<td>设置或返回匹配的元素集合中的 HTML 内容。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_insertafter.asp" target="_blank" rel="external">insertAfter()</a></td>
<td>把匹配的元素插入到另一个指定的元素集合的后面。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_insertbefore.asp" target="_blank" rel="external">insertBefore()</a></td>
<td>把匹配的元素插入到另一个指定的元素集合的前面。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_prepend.asp" target="_blank" rel="external">prepend()</a></td>
<td>向每个匹配的元素内部前置内容。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_perpendto.asp" target="_blank" rel="external">prependTo()</a></td>
<td>向每个匹配的元素内部前置内容。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_remove.asp" target="_blank" rel="external">remove()</a></td>
<td>移除所有匹配的元素。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/attributes_removeattr.asp" target="_blank" rel="external">removeAttr()</a></td>
<td>从所有匹配的元素中移除指定的属性。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/attributes_removeclass.asp" target="_blank" rel="external">removeClass()</a></td>
<td>从所有匹配的元素中删除全部或者指定的类。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_replaceall.asp" target="_blank" rel="external">replaceAll()</a></td>
<td>用匹配的元素替换所有匹配到的元素。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_replacewith.asp" target="_blank" rel="external">replaceWith()</a></td>
<td>用新内容替换匹配的元素。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_text.asp" target="_blank" rel="external">text()</a></td>
<td>设置或返回匹配元素的内容。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/attributes_toggleclass.asp" target="_blank" rel="external">toggleClass()</a></td>
<td>从匹配的元素中添加或删除一个类。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_unwrap.asp" target="_blank" rel="external">unwrap()</a></td>
<td>移除并替换指定元素的父元素。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/attributes_val.asp" target="_blank" rel="external">val()</a></td>
<td>设置或返回匹配元素的值。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_wrap.asp" target="_blank" rel="external">wrap()</a></td>
<td>把匹配的元素用指定的内容或元素包裹起来。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_wrapall.asp" target="_blank" rel="external">wrapAll()</a></td>
<td>把所有匹配的元素用指定的内容或元素包裹起来。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jquery/manipulation_wrapinner.asp" target="_blank" rel="external">wrapinner()</a></td>
<td>将每一个匹配的元素的子内容用指定的内容或元素包裹起来。</td>
</tr>
</tbody>
</table>
<p>获取dom获取表单</p>
<p>document.getElementsByTagName（”from”）;</p>
<p>使用dom获取 某元素src属性的方法</p>
<p>element.getAttribute(“src”); </p>
<p>利用jquery操作dom</p>
<ol>
<li>利用jquery进行文档处理</li>
</ol>
<p>2.1：外部插入</p>
<p><strong>after(content)</strong></p>
<p>在每个匹配的元素之后插入内容。</p>
<p>返回值</p>
<p>jQuery</p>
<p>参数</p>
<p>content (String, dom, jQuery) : 插入到每个目标后的内容</p>
<p>示例</p>
<p>在所有段落之后插入一些HTML标记代码。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p>

<p>jQuery 代码:</p>
<p>$(“p”).after(“<b>Hello</b>“);</p>
<p>结果:</p>
<p>I would like to say: </p><b>Hello</b><br><br>在所有段落之后插入一个DOM元素。<br><br>HTML 代码:<br><br><b id="foo">Hello</b><p>I would like to say: </p>

<p>jQuery 代码:</p>
<p><strong>$(“p”).after( $(“#foo”)[0] );//**</strong>将jquery<strong><strong>对象转换为dom</strong></strong>对象$(“#foo”)[0]**</p>
<p>结果:</p>
<p>I would like to say: </p><b id="foo">Hello</b><br><br>在所有段落中后插入一个jQuery对象(类似于一个DOM元素数组)。<br><br>HTML 代码:<br><br><b>Hello</b><p>I would like to say: </p>

<p>jQuery 代码:</p>
<p><strong>$(“p”).after( $(“b”) );</strong></p>
<p>结果:</p>
<p>I would like to say: </p><b>Hello</b><br><br>before(content)在每个匹配的元素之前插入内容。<br><br>返回值<br><br>jQuery<br><br>参数<br><br>content (String, Element, jQuery) : 插入到每个目标前的内容<br><br>示例<br><br>在所有段落之前插入一些HTML标记代码。<br><br>HTML 代码:<br><br><p>I would like to say: </p>

<p>jQuery 代码:</p>
<p>$(“p”).before(“<b>Hello</b>“);</p>
<p>结果:   [ <b>Hello</b></p><p>I would like to say: </p> ]<p></p>
<p>在所有段落之前插入一个元素。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><b id="foo">Hello</b><br><br>jQuery 代码:<br><br>$(“p”).before( $(“#foo”)[0] );<br><br>结果:<br><br><b id="foo">Hello</b><p>I would like to say: </p>

<p>在所有段落中前插入一个jQuery对象(类似于一个DOM元素数组)。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><b>Hello</b><br><br>jQuery 代码:<br><br>$(“p”).before( $(“b”) );<br><br>结果:<br><br><b>Hello</b><p>I would like to say: </p>

<p><strong>insertAfter(content)</strong></p>
<p>把所有匹配的元素插入到另一个、指定的元素元素集合的后面。</p>
<p>实际上，使用这个方法是颠倒了常规的$(A).after(B)的操作，即不是把B插入到A后面，而是把A插入到B后面。</p>
<p>返回值jQuery</p>
<p>参数 content (String) : 用于匹配元素的jQuery表达式</p>
<p>示例</p>
<p>在所有段落之后插入一个元素。与 $(“#foo”).after(“p”)相同</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><div id="foo">Hello</div><br><br>jQuery 代码:<br><br>$(“p”).insertAfter($(“#foo“)); <strong> **</strong>在$(“#foo“)<strong>**在它后面插入段落P</strong><br><br>结果:<br><br><div id="foo">Hello</div><p>I would like to say: </p>

<p>insertBefore(content)</p>
<p>把所有匹配的元素插入到另一个、指定的元素元素集合的前面。</p>
<p>实际上，使用这个方法是颠倒了常规的$(A).before(B)的操作，即不是把B插入到A前面，而是把A插入到B前面。</p>
<p>返回值jQuery</p>
<p>参数 content (String) : 用于匹配元素的jQuery表达式</p>
<p>示例</p>
<p>在所有段落之前插入一个元素。与 $(“#foo”).before(“p”)相同。</p>
<p>HTML 代码:</p>
<div id="foo">Hello</div><p>I would like to say: </p><br><br>jQuery 代码:<br><br>$(“p”).insertBefore($(“#foo“));   在$(“#foo“)前面插入段落p<br><br>结果:<br><br><p>I would like to say: </p><div id="foo">Hello</div>



<p>2.2: 内部插入</p>
<p><strong>append(content)</strong></p>
<p>向每个匹配的元素内部追加内容。</p>
<p>这个操作与对指定的元素执行appendChild方法，将它们添加到文档中的情况类似。</p>
<p>返回值jQuery</p>
<p><strong>参数 content (String, Element, jQuery) : **</strong>要追加到目标中的内容**</p>
<p>示例 ：向所有段落中追加一些HTML标记。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p>

<p>jQuery 代码:</p>
<p>$(“p”).append(“<b>Hello</b>“);   <strong>在p**</strong>元素之间插入 b<strong>**元素</strong></p>
<p>结果:</p>
<p>[ </p><p>I would like to say: <b>Hello</b></p> ]<p></p>
<p>appendTo(content)</p>
<p>把所有匹配的元素追加到另一个、指定的元素元素集合中。</p>
<p>实际上，使用这个方法是颠倒了常规的$(A).append(B)的操作，即不是把B追加到A中，而是把A追加到B中。</p>
<p>返回值jQuery</p>
<p>参数content (String) :用于被追加的内容</p>
<p>示例</p>
<p>把所有段落追加到ID值为foo的元素中。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><div id="foo"></div><br><br>jQuery 代码:<br><br>$(“p”).appendTo($(“#foo“)); <strong>P**</strong>元素被添加到div<strong><strong>元素#foo</strong></strong>之中<strong><br><br>结果:<br><br><div id="foo"><p>I would like to say: </p></div>

</strong>prepend(content)**<br><br>向每个匹配的元素内部前置内容。<br><br>这是向所有匹配元素内部的开始处插入内容的最佳方式。<br><br>返回值jQuery<br><br>参数content (String, Element, jQuery) : 要插入到目标元素内部前端的内容<br><br>示例<br><br>向所有段落中前置一些HTML标记代码。<br><br>HTML 代码:<br><br><p>I would like to say: </p>

<p>jQuery 代码:</p>
<p>$(“p”).prepend(“<b>Hello</b>“);   //将<b>Hello</b>添加到p标签内容前</p>
<p>结果:</p>
<p>[ </p><p><b>Hello</b>I would like to say: </p> ]<p></p>
<p>将一个DOM元素前置入所有段落</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><br><p>I would like to say: </p><br><b class="foo">Hello</b><br><b class="foo">Good Bye</b><br><br>jQuery 代码:<br><br>$(“p”).prepend( $(“.foo”)[0] );<br><br>结果:<br><br><p><b class="foo">Hello</b>I would like to say: </p><br><p><b class="foo">Hello</b>I would like to say: </p><br><b class="foo">Hello</b><br><b class="foo">Good Bye</b><br><br>向所有段落中前置一个jQuery对象(类似于一个DOM元素数组)。<br><br>HTML 代码:<br><br><p>I would like to say: </p><b>Hello</b><br><br>jQuery 代码:<br><br>$(“p”).prepend( $(“b”) );<br><br>结果:<br><br><p><b>Hello</b>I would like to say: </p>

<p><strong>prependTo(content)</strong></p>
<p>把所有匹配的元素前置到另一个、指定的元素元素集合中。</p>
<p>实际上，使用这个方法是颠倒了常规的$(A).prepend(B)的操作，即不是把B前置到A中，而是把A前置到B中。</p>
<p>返回值jQuery</p>
<p>参数content (String) :用于匹配元素的jQuery表达式</p>
<p>示例</p>
<p>把所有段落追加到ID值为foo的元素中。</p>
<p>HTML 代码:</p>
<p>I would like to say: </p><div id="foo"></div><br><br>jQuery 代码:<br><br>$(“p”).prependTo($(“#foo“));  <strong>把所有段落插入到div foo**</strong>中<strong><br><br>结果:<br><br><div id="foo"><p>I would like to say: </p></div> 2.3:

</strong>包裹<strong>**</strong><br><br>}       <strong>wrap(html)</strong><br><br>把所有匹配的元素用其他元素的结构化标记包裹起来。<br><br>这种包装对于在文档中插入额外的结构化标记最有用，而且它不会破坏原始文档的语义品质。 这个函数的原理是检查提供的第一个元素（它是由所提供的HTML标记代码动态生成的），并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包裹元素。<br><br><br><br>当HTML标记代码中的元素包含文本时无法使用这个函数。因此，如果要添加文本应该在包裹完成之后再行添加。<br><br>返回值jQuery<br><br>参数<br><br>html (String) : HTML标记代码字符串，用于动态生成元素并包裹目标元素<br><br>示例<br><br>把所有的段落用一个新创建的div包裹起来<br><br>HTML 代码:<br><br><p>Test Paragraph.</p>

<p>jQuery 代码:</p>
<p>$(“p”).wrap(“<div class="wrap"></div>“); 段落P用div class=’wrap’包裹起来</p>
<p>结果:</p>
<p><strong>Test Paragraph.</strong></p>
<p>wrap(elem)</p>
<p>把所有匹配的元素用其他元素的结构化标记包装起来。</p>
<p>返回值jQuery</p>
<p>参数elem (Element) : 用于包装目标元素的DOM元素</p>
<p>}         示例</p>
<p>}         用ID是”content”的div将每一个段落包裹起来</p>
<p>}         HTML 代码:</p>
<p>}         </p><p>Test Paragraph.</p><div id="content"></div><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).wrap(document.getElementById(‘content’));</p>
<p>}         结果:</p>
<p>}         <div id="content"><p>Test Paragraph.</p></div><div id="content"></div></p>
<p><strong>wrapAll(html)</strong></p>
<p>将所有匹配的元素用单个元素包裹起来</p>
<p>这于 ‘.wrap()’ 是不同的，’.wrap()’为每一个匹配的元素都包裹一次。 这种包装对于在文档中插入额外的结构化标记最有用，而且它不会破坏原始文档的语义品质。</p>
<p>这个函数的原理是检查提供的第一个元素并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包装元素。</p>
<p>返回值jQuery</p>
<p>参数html (String) : TML标记代码字符串，用于动态生成元素并包装目标元素</p>
<p>示例</p>
<p>用一个生成的div将所有段落包裹起来</p>
<p>}         HTML 代码:</p>
<p>}         </p><p>Hello</p><p>cruel</p><p>World</p><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).wrapAll(“<div></div>“);  //如果是wrap 则 每个段落P都被div包裹</p>
<p>}         结果:</p>
<p>}         <div><p>Hello</p><p>cruel</p><p>World</p></div></p>
<p><strong>wrapAll(elem)</strong></p>
<p>将所有匹配的元素用单个元素包裹起来</p>
<p>这于 ‘.wrap()’ 是不同的，’.wrap()’为每一个匹配的元素都包裹一次。</p>
<p>返回值jQuery</p>
<p>参数elem (Element) : 用于包装目标元素的DOM元素</p>
<p>示例</p>
<p>用一个生成的div将所有段落包裹起来</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“p”).wrapAll(document.createElement(“div”));</p>
<p>结果:</p>
<div><p>Hello</p><p>cruel</p><p>World</p></div>

<p><strong>wrapInner(html)</strong></p>
<p>将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来</p>
<p>这个函数的原理是检查提供的第一个元素（它是由所提供的HTML标记代码动态生成的），并在它的代码结构中找到最上层的祖先元素－－这个祖先元素就是包装元素。</p>
<p>返回值jQuery</p>
<p>参数html (String) : HTML标记代码字符串，用于动态生成元素并包装目标元素</p>
<p>示例</p>
<p>把所有段落内的每个子内容加粗</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“p”).wrapInner(“<b></b>“);</p>
<p>结果:</p>
<p><b>Hello</b></p><p><b>cruel</b></p><p><b>World</b></p>

<p><strong>wrapInner(elem)</strong></p>
<p>将每一个匹配的元素的子内容(包括文本节点)用DOM元素包裹起来</p>
<p>返回值jQuery</p>
<p>参数elem (Element) : 用于包装目标元素的DOM元素</p>
<p>示例</p>
<p>把所有段落内的每个子内容加粗</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“p”).wrapInner(document.createElement(“b”));</p>
<p>结果:</p>
<p><b>Hello</b></p><p><b>cruel</b></p><p><b>World</b></p>









<p><strong>2.4: **</strong>替换<strong>**</strong></p>
<p><strong>replaceWith(content)</strong></p>
<p>将所有匹配的元素替换成指定的HTML或DOM元素。</p>
<p>返回值</p>
<p>jQuery</p>
<p>参数</p>
<p>content (String, Element, jQuery) : 用于将匹配元素替换掉的内容</p>
<p>示例</p>
<p>把所有的段落标记替换成加粗的标记。</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“p”).replaceWith(“<b>Paragraph. </b>“);</p>
<p>结果:</p>
<p><b>Paragraph. </b><b>Paragraph. </b><b>Paragraph. </b></p>
<p><strong>replaceAll(selector) **</strong>去替换<strong>**</strong></p>
<p>用匹配的元素替换掉所有 selector匹配到的元素。</p>
<p>返回值jQuery</p>
<p>参数selector (选择器) : 用于查找<strong>所要被替换的元素</strong></p>
<p>示例</p>
<p>把所有的段落标记替换成加粗标记</p>
<p>HTML 代码:</p>
<p>Hello</p><p>cruel</p><p>World</p>

<p>jQuery 代码:</p>
<p>$(“<b>Paragraph. </b>“).replaceAll(“p”);  </p>
<p>结果:</p>
<p><b>Paragraph. </b><b>Paragraph. </b><b>Paragraph. </b></p>
<p><strong>2.5: **</strong>删除<strong>**</strong></p>
<p>}       <strong>empty()</strong></p>
<p>删除匹配的元素集合中所有的子节点。</p>
<p>返回值jQuery</p>
<p>示例把所有段落的子元素（包括文本节点）删除</p>
<p>HTML 代码:</p>
<p>Hello, <span>Person</span> <a href="#">and person</a></p>

<p>jQuery 代码:</p>
<p>$(“p”).empty();  <strong>删除p**</strong>中所有内容**</p>
<p>结果:</p>
<p></p>



<p><strong>remove([expr])</strong></p>
<p>从DOM中删除所有匹配的元素。</p>
<p>这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。</p>
<p>返回值jQuery</p>
<p>参数expr (String) : (可选) 用于筛选元素的jQuery表达式</p>
<p>示例从DOM中把所有段落删除</p>
<p>HTML 代码:</p>
<p>Hello</p> how are <p>you?</p>

<p>jQuery 代码:</p>
<p>$(“p”).remove(); <strong>//**</strong>移除p<strong>**标签</strong></p>
<p>结果:</p>
<p>how are</p>
<p>从DOM中把带有hello类的段落删除</p>
<p>}         HTML 代码:</p>
<p>}         </p><p class="hello">Hello</p> how are <p>you?</p><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).remove(“.hello”);</p>
<p>}         结果:</p>
<p>}         how are </p><p>you?</p><p></p>
<p><strong>2.6: **</strong>复制<strong>**</strong></p>
<p><strong>clone()</strong></p>
<p>克隆匹配的DOM元素并且选中这些克隆的副本。</p>
<p>在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用。</p>
<p>返回值jQuery</p>
<p>示例克隆所有b元素（并选中这些克隆的副本），然后将它们前置到所有段落中。</p>
<p>HTML 代码:</p>
<p><b>Hello</b></p><p>, how are you?</p><p></p>
<p>jQuery 代码:</p>
<p>$(“b”).clone().prependTo(“p”);  <strong>将b**</strong>标签赋值到p<strong><strong>标签中,</strong></strong>没有clone <strong>**就会直接插入到p</strong></p>
<p>结果:</p>
<p><b>Hello</b></p><p><b>Hello</b>, how are you?</p><p></p>
<hr>
<hr>
<hr>
<hr>
<hr>
<p><strong>clone(true)</strong></p>
<p>元素以及其所有的事件处理并且选中这些克隆的副本</p>
<p>在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用。</p>
<p>返回值jQuery</p>
<p><strong>参数true (Boolean) : **</strong>设置为true<strong>**以便复制元素的所有事件处理</strong></p>
<p>示例</p>
<p>创建一个按钮，他可以复制自己，并且他的副本也有同样功能。</p>
<p>HTML 代码:</p>
<button>Clone Me!</button>

<p>jQuery 代码:</p>
<p>$(“button”).click(function(){<br>  $(this).clone(true).insertAfter(this);</p>
<p><strong>//**</strong>复制 <strong><strong>当前元素包含他的事件 </strong></strong>并将副本插入到当前元素前面**});</p>
<p>二、jQuery遍历与查找节点</p>
<p>Ø       过滤</p>
<p>Ø       查找</p>
<p>Ø       串联</p>
<p>1.1、jQuery过滤</p>
<p><strong>eq(index)**</strong>获取第N<strong>**个元素</strong></p>
<p>这个元素的位置是从0算起。</p>
<p>返回值jQuery</p>
<p>参数index (Integer) :元素在jQuery对象中的索引</p>
<p>示例</p>
<p>获取匹配的第二个元素</p>
<p>HTML 代码:</p>
<p> This is just a test.</p> <p> So is this</p>

<p>jQuery 代码:</p>
<p>$(“p”).eq(1)</p>
<p>结果:</p>
<p>[ </p><p> So is this</p> ]<p></p>
<p><strong>hasClass(class) **</strong>查找类**</p>
<p>检查当前的元素是否含有某个特定的类，如果有，则返回true。</p>
<p>这其实就是 is(“.” + class)。</p>
<p>返回值Boolean</p>
<p>参数class (String) : 用于匹配的类名</p>
<p>示例：给包含有某个类的元素进行一个动画。</p>
<p>HTML 代码:</p>
<div class="protected"></div><div></div>

<p>jQuery 代码:</p>
<p>$(“div”).click(function(){<br>  if ( $(this).hasClass(“protected”) )<br>    $(this)<br>      .animate({ left: -10 })<br>      .animate({ left: 10 })<br>      .animate({ left: -10 })<br>      .animate({ left: 10 })<br>      .animate({ left: 0 });<br>});</p>
<p><strong>is(expr)</strong></p>
<p>用一个表达式来检查当前选择的元素集合，如果其中至少有一个元素符合这个给定的表达式就返回true。</p>
<p>如果没有元素符合，或者表达式无效，都返回’false’. ‘filter’ 内部实际也是在调用这个函数，所以，filter()函数原有的规则在这里也适用。</p>
<p>返回值Boolean</p>
<p>参数expr (String) :用于筛选的表达式</p>
<p>示例：由于input元素的父元素是一个表单元素，所以返回true。</p>
<p>HTML 代码:</p>
 <form><input type="checkbox"></form>

<p>jQuery 代码:</p>
<p>$(“input[type=’checkbox’]”).parent().is(“form”) // parent()父元素</p>
<p>结果:</p>
<p>true</p>
<p>1.2、jQuery查找</p>
<p><strong>find(expr)</strong></p>
<p>搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法。</p>
<p>所有搜索都依靠jQuery表达式来完成。这个表达式可以使用CSS1-3的选择器语法来写。</p>
<p>返回值jQuery</p>
<p>参数：expr (String) :用于查找的表达式</p>
<p>示例：从所有的段落开始，进一步搜索下面的span元素。与$(“p span”)相同。</p>
<p>}         HTML 代码:</p>
<p>}         </p><p><span>Hello</span>, how are you?</p><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).find(“span”)</p>
<p>}         结果:</p>
<p>}         [ <span>Hello</span> ]</p>
<p><strong>next([expr])</strong></p>
<p>取得一个包含匹配的元素集合中每一个元素<strong>紧邻的后面同辈</strong>元素的元素集合。</p>
<p>这个函数只返回后面那个紧邻的同辈元素，而不是后面<strong>所有的同辈元素（可以使用**</strong>nextAll<strong>**）。</strong>可以用一个可选的表达式进行筛选。</p>
<p>返回值jQuery</p>
<p>参数expr (String) : (可选) 用于筛选的表达式</p>
<p>}         示例找到每个段落的后面紧邻的同辈元素。</p>
<p>}         HTML 代码:</p>
<p>}         </p><p>Hello</p><p>Hello Again</p><div><span>And Again</span></div><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).next()</p>
<p>}         结果:</p>
<p>}         [ </p><p>Hello Again</p>, <div><span>And Again</span></div> ]<p></p>
<p><strong>找到每个段落的后面紧邻的同辈元素中类名为selected**</strong>的元素。**</p>
<p>}         HTML 代码:</p>
<p>}         </p><p>Hello</p><p class="selected">Hello Again</p><div><span>And Again</span></div><p></p>
<p>}         jQuery 代码:</p>
<p>}         $(“p”).next(“.selected”)</p>
<p>}         结果:</p>
<p>}         [ </p><p class="selected">Hello Again</p> ]<p></p>
<p><strong>1.3**</strong>、<strong><strong>jQuery</strong></strong>串联<strong>**</strong></p>
<p>}       <strong>andSelf()</strong></p>
<p><strong>加入先前所选的加入当前元素中</strong></p>
<p><strong>对于筛选或查找后的元素，要加入先前所选元素时将会很有用。</strong></p>
<p>返回值jQuery</p>
<p>示例:选取所有div以及内部的p，并加上border类</p>
<p>HTML 代码:</p>
<div><p>First Paragraph</p><p>Second Paragraph</p></div>

<p>jQuery 代码:</p>
<p>$(“div”).find(“p”).andSelf().addClass(“border”);</p>
<p>//div中寻找段落P，和他自己（andSelf）加类class=”border”</p>
<p>结果:</p>
<div class="border"><p class="border">First Paragraph</p><p class="border">Second Paragraph</p></div>

]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://feahter.github.io/2016/09/07/jQuery%20%E7%9A%84%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="jQuery-的选择器"><a href="#jQuery-的选择器" class="headerlink" title="jQuery 的选择器"></a>jQuery 的选择器</h1><p>jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法 </p>
<p>$(“#myELement”)    选择id值等于myElement的元素，id值不能重复在文档中只能有一个id值是myElement所以得到的是唯一的元素<br>$(“div”)           选择所有的div标签元素，返回div元素数组<br>$(“.myClass”)      选择使用myClass类的css的所有元素<br>$(“*”)             选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(“#myELement,div,.myclass”) </p>
<p>层叠选择器：<br>$(“form input”)         选择所有的form元素中的input元素<br>$(“#main &gt; *”)          选择id值为main的所有的子元素<br>$(“label + input”)     选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素<br>$(“#prev ~ div”)       同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签 </p>
<p>基本过滤选择器：<br>$(“tr:first”)               选择所有tr元素的第一个<br>$(“tr:last”)                选择所有tr元素的最后一个<br>$(“input:not(:checked) + span”)   </p>
<p>过滤掉：checked的选择器的所有的input元素 </p>
<p>$(“tr:even”)               选择所有的tr元素的第0，2，4… …个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始） </p>
<p>$(“tr:odd”)                选择所有的tr元素的第1，3，5… …个元素<br>$(“td:eq(2)”)             选择所有的td元素中序号为2的那个td元素<br>$(“td:gt(4)”)             选择td元素中序号大于4的所有td元素<br>$(“td:ll(4)”)              选择td元素中序号小于4的所有的td元素<br>$(“:header”)<br>$(“div:animated”)<br>内容过滤选择器： </p>
<p>$(“div:contains(‘John’)”) 选择所有div中含有John文本的元素<br>$(“td:empty”)           选择所有的为空（也不包括文本节点）的td元素的数组<br>$(“div:has(p)”)        选择所有含有p标签的div元素<br>$(“td:parent”)          选择所有的以td为父节点的元素数组<br>可视化过滤选择器： </p>
<p>$(“div:hidden”)        选择所有的被hidden的div元素<br>$(“div:visible”)        选择所有的可视化的div元素<br>属性过滤选择器： </p>
<p>$(“div[id]”)              选择所有含有id属性的div元素<br>$(“input[name=’newsletter’]”)    选择所有的name属性等于’newsletter’的input元素 </p>
<p>$(“input[name!=’newsletter’]”) 选择所有的name属性不等于’newsletter’的input元素 </p>
<p>$(“input[name^=’news’]”)         选择所有的name属性以’news’开头的input元素<br>$(“input[name$=’news’]”)         选择所有的name属性以’news’结尾的input元素<br>$(“input[name*=’man’]”)          选择所有的name属性包含’news’的input元素 </p>
<p>$(“input[id][name$=’man’]”)    可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素 </p>
<p>子元素过滤选择器： </p>
<p>$(“ul li:nth-child(2)”),$(“ul li:nth-child(odd)”),$(“ul li:nth-child(3n + 1)”) </p>
<p>$(“div span:first-child”)          返回所有的div元素的第一个子节点的数组<br>$(“div span:last-child”)           返回所有的div元素的最后一个节点的数组<br>$(“div button:only-child”)       返回所有的div中只有唯一一个子节点的所有子节点的数组 </p>
<p>表单元素选择器： </p>
<p>$(“:input”)                  选择所有的表单输入元素，包括input, textarea, select 和 button </p>
<p>$(“:text”)                     选择所有的text input元素<br>$(“:password”)           选择所有的password input元素<br>$(“:radio”)                   选择所有的radio input元素<br>$(“:checkbox”)            选择所有的checkbox input元素<br>$(“:submit”)               选择所有的submit input元素<br>$(“:image”)                 选择所有的image input元素<br>$(“:reset”)                   选择所有的reset input元素<br>$(“:button”)                选择所有的button input元素<br>$(“:file”)                     选择所有的file input元素<br>$(“:hidden”)               选择所有类型为hidden的input元素或表单的隐藏域 </p>
<p>表单元素过滤选择器： </p>
<p>$(“:enabled”)             选择所有的可操作的表单元素<br>$(“:disabled”)            选择所有的不可操作的表单元素<br>$(“:checked”)            选择所有的被checked的表单元素<br>$(“select option:selected”) 选择所有的select 的子元素中被selected的元素 </p>
<p>选取一个 name 为”S_03_22″的input text框的上一个td的text值<br>$(”input[@ name =S_03_22]“).parent().prev().text() </p>
<p>名字以”S_”开始，并且不是以”_R”结尾的值</p>
<p>$(“ input[@ name ^=’ S_’]”).not(“[@ <code>name $=&#39;_R</code>‘]”) </p>
<p>一个名为 radio_01的radio所选的值<br>$(”input[@ name =radio_01][@checked]“).val(); </p>
<p>$(“A B”) 查找A元素下面的所有子节点，包括非直接子节点<br>$(“A&gt;B”) 查找A元素下面的直接子节点<br>$(“A+B”) 查找A元素后面的兄弟节点，包括非直接子节点<br>$(“A~B”) 查找A元素后面的兄弟节点，不包括非直接子节点 </p>
<ol>
<li>$(“A B”) 查找A元素下面的所有子节点，包括非直接子节点 </li>
</ol>
<p>例子：找到表单中所有的 input 元素 </p>
<p>HTML 代码: </p>
<p><form></form></p>
<p><label>Name:</label></p>
<p><input name="name"></p>
<p><fieldset><br>      <label>Newsletter:</label><br>      <input name="newsletter"><br></fieldset><br></p>
<p><input name="none"><br>jQuery 代码: </p>
<p>$(“form input”)<br>结果: </p>
<p>[ <input name="name">, <input name="newsletter"> ] </p>
<ol>
<li>$(“A&gt;B”) 查找A元素下面的直接子节点<br>例子：匹配表单中所有的子级input元素。 </li>
</ol>
<p>HTML 代码: </p>
<p><form></form></p>
<p><label>Name:</label></p>
<p><input name="name"></p>
<p><fieldset><br>      <label>Newsletter:</label><br>      <input name="newsletter"><br></fieldset><br></p>
<p><input name="none"><br>jQuery 代码: </p>
<p>$(“form &gt; input”)<br>结果: </p>
<p>[ <input name="name"> ] </p>
<ol>
<li>$(“A+B”) 查找A元素后面的兄弟节点，包括非直接子节点<br>例子：匹配所有跟在 label 后面的 input 元素 </li>
</ol>
<p>HTML 代码: </p>
<p><form></form></p>
<p><label>Name:</label></p>
<p><input name="name"></p>
<p><fieldset><br>      <label>Newsletter:</label><br>      <input name="newsletter"><br></fieldset><br></p>
<p><input name="none"><br>jQuery 代码: </p>
<p>$(“label + input”)<br>结果: </p>
<p>[ <input name="name">, <input name="newsletter"> ] </p>
<ol>
<li>$(“A~B”) 查找A元素后面的兄弟节点，不包括非直接子节点<br>例子：找到所有与表单同辈的 input 元素 </li>
</ol>
<p>HTML 代码: </p>
<p><form></form></p>
<p><label>Name:</label></p>
<p><input name="name"></p>
<p><fieldset><br>      <label>Newsletter:</label><br>      <input name="newsletter"><br></fieldset><br></p>
<p><input name="none"><br>jQuery 代码: </p>
<p>$(“form ~ input”)<br>结果: </p>
<p>[ <input name="none"> ] </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://feahter.github.io/2016/08/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
